
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using IAM.Identities;
using ServiceKit.Net;
using System.Globalization;

namespace IAM.Identities
{
	public partial interface IIdentityAdminIF_v1
	{
		/// <return>IIdentityAdminIF_v1.LdapDomainDTO</return>
		public Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> RegisterLdapDomain(CallingContext ctx, LdapDomainDTO ldap);

		/// <return>List<IIdentityAdminIF_v1.LdapDomainSummaryDTO></return>
		public Task<Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>> GetAllRegisteredLdapDomain(CallingContext ctx);

		/// <return>IIdentityAdminIF_v1.LdapDomainDTO</return>
		public Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> GetRegisteredLdapDomain(CallingContext ctx, string id);

		/// <return>IIdentityAdminIF_v1.LdapDomainDTO</return>
		public Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> UpdateRegisteredLdapDomain(CallingContext ctx, LdapDomainDTO ldap);

		/// <return>List<IIdentityAdminIF_v1.AccountSummaryDTO></return>
		public Task<Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>> getAllAccount(CallingContext ctx);

		/// <return>IIdentityAdminIF_v1.AccountDTO</return>
		public Task<Response<IIdentityAdminIF_v1.AccountDTO>> getAccount(CallingContext ctx, string id);

		/// <return>IIdentityAdminIF_v1.AccountDTO</return>
		public Task<Response<IIdentityAdminIF_v1.AccountDTO>> createAccount(CallingContext ctx, string username, AccountTypes accountType);

		/// <return>IIdentityAdminIF_v1.AccountDTO</return>
		public Task<Response<IIdentityAdminIF_v1.AccountDTO>> updateAccount(CallingContext ctx, string accountId, string etag, AccountDataDTO data);

		/// <return>List<IIdentityAdminIF_v1.AuthDTO></return>
		public Task<Response<List<IIdentityAdminIF_v1.AuthDTO>>> listAuthsForAccount(CallingContext ctx, string accountId);

		/// <return>IIdentityAdminIF_v1.AuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.AuthDTO>> setActiveForAuth(CallingContext ctx, string accountId, string authId, bool isActive);

		/// <return>IIdentityAdminIF_v1.EmailAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> createtEmailAuth(CallingContext ctx, string accountId, string email, bool initialPassword, TwoFactorConfigurationDTO twoFactor);

		/// <return>IIdentityAdminIF_v1.EmailAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> getEmailAuth(CallingContext ctx, string accountId, string authId);

		/// <return>IIdentityAdminIF_v1.EmailAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> changePasswordOnEmailAuth(CallingContext ctx, string accountId, string authId, string etag, string newPassword);

		/// <return>IIdentityAdminIF_v1.EmailAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> setTwoFactorOnEmailAuth(CallingContext ctx, string accountId, string authId, string etag, TwoFactorConfigurationDTO twoFactor);

		/// <return>bool</return>
		public Task<Response<bool>> confirmEmail(CallingContext ctx, string token);

		/// <return>IIdentityAdminIF_v1.ADAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> createADAuth(CallingContext ctx, string accountId, string ldapDomainId, string adUsername, TwoFactorConfigurationDTO twoFactor);

		/// <return>IIdentityAdminIF_v1.ADAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> getADAuth(CallingContext ctx, string accountId, string authId);

		/// <return>IIdentityAdminIF_v1.ADAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> setTwoFactorOnADAuth(CallingContext ctx, string accountId, string authId, string etag, TwoFactorConfigurationDTO twoFactor);

		/// <return>IIdentityAdminIF_v1.KAUAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> createKAUAuth(CallingContext ctx, string accountId, string kauUserId, TwoFactorConfigurationDTO twoFactor);

		/// <return>IIdentityAdminIF_v1.KAUAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> getKAUAuth(CallingContext ctx, string accountId, string authId);

		/// <return>IIdentityAdminIF_v1.KAUAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> setTwoFactorOnKAUAuth(CallingContext ctx, string accountId, string authId, string etag, TwoFactorConfigurationDTO twoFactor);

		/// <return>IIdentityAdminIF_v1.CertificateAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> createCertificateAuthFromCSR(CallingContext ctx, string accountId, CsrInputDTO data);

		/// <return>IIdentityAdminIF_v1.CertificateAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> setCertificateAuthActive(CallingContext ctx, string accountId, string authId, string etag, bool isActive);

		/// <return>IIdentityAdminIF_v1.CertificateAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> revokeCertificate(CallingContext ctx, string accountId, string authId, string etag, string reason);

		/// <return>IIdentityAdminIF_v1.CertificateAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> reissueCertificate(CallingContext ctx, string accountId, string authId, CsrInputDTO data);

		/// <return>IIdentityAdminIF_v1.CertificateAuthDTO</return>
		public Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> getCertificateAuth(CallingContext ctx, string accountId, string authId);


		public enum AccountTypes
		{
			User,
			ExternalSystem,
			InternalService,
		}
		#region GrpcMapping
		public static class AccountTypesMappings
		{
			public static Protos.IdentityAdminIF_v1.AccountTypes ToGrpc( IIdentityAdminIF_v1.AccountTypes @this )
			{
				return @this switch
				{
					IIdentityAdminIF_v1.AccountTypes.User => Protos.IdentityAdminIF_v1.AccountTypes.User,
					IIdentityAdminIF_v1.AccountTypes.ExternalSystem => Protos.IdentityAdminIF_v1.AccountTypes.ExternalSystem,
					IIdentityAdminIF_v1.AccountTypes.InternalService => Protos.IdentityAdminIF_v1.AccountTypes.InternalService,
					_ => throw new NotImplementedException(), 
				};
			}

			public static IIdentityAdminIF_v1.AccountTypes FromGrpc( Protos.IdentityAdminIF_v1.AccountTypes @this )
			{
				return @this switch
				{
					Protos.IdentityAdminIF_v1.AccountTypes.User => IIdentityAdminIF_v1.AccountTypes.User,
					Protos.IdentityAdminIF_v1.AccountTypes.ExternalSystem => IIdentityAdminIF_v1.AccountTypes.ExternalSystem,
					Protos.IdentityAdminIF_v1.AccountTypes.InternalService => IIdentityAdminIF_v1.AccountTypes.InternalService,
					_ => throw new NotImplementedException(), 
				};
			}

		}
		#endregion GrpcMapping
		public partial class LdapDomainDTO : IEquatable<LdapDomainDTO>
		{
			public partial class DomainController : IEquatable<DomainController>
			{
				/// Hostname or IP address of the DC
				public string host { get; set; }
				/// LDAP or LDAPS port (e.g. 389 or 636)
				public int port { get; set; }

				#region Clone 
				public virtual DomainController Clone()
				{
					DomainController clone = new();

					clone.host = new string(host.ToCharArray());
					clone.port = port;

					return clone;
				}
				#endregion Clone 

				#region Equals & HashCode 
				public bool Equals( DomainController other )
				{
					if (other is null) return false;

					if(host != other.host) return false;
					if(port != other.port) return false;

					return true;
				}

				public override bool Equals(object obj) => Equals(obj as DomainController);

				public override int GetHashCode()
				{
					var hash = new HashCode();
					hash.Add(host);
					hash.Add(port);

					return hash.ToHashCode();
				}
				#endregion Equals & HashCode 

				#region GrpcMapping
				public static Protos.IdentityAdminIF_v1.LdapDomainDTO.Types.DomainController ToGrpc( IIdentityAdminIF_v1.LdapDomainDTO.DomainController @this )
				{
					Protos.IdentityAdminIF_v1.LdapDomainDTO.Types.DomainController result = new();

					result.Host = @this.host;
					result.Port = @this.port;
;

					return result;
				}
				public static IIdentityAdminIF_v1.LdapDomainDTO.DomainController FromGrpc( Protos.IdentityAdminIF_v1.LdapDomainDTO.Types.DomainController @from )
				{
					IIdentityAdminIF_v1.LdapDomainDTO.DomainController result = new();

					result.host = @from.Host;
					result.port = @from.Port;
;

					return result;
				}
				#endregion GrpcMapping
			}

			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			/// Fully Qualified Domain Name (e.g. yourdomain.local)
			public string name { get; set; }
			/// Optional description or notes
			public string description { get; set; }
			/// NetBIOS name (e.g. YOURDOMAIN)
			public string netbiosName { get; set; }
			/// List of Domain Controller hostnames or IP addresses
			public List<IIdentityAdminIF_v1.LdapDomainDTO.DomainController> domainControllers { get; set; } = new();
			/// Base Distinguished Name (where LDAP queries start, e.g. DC=yourdomain,DC=local)
			public string baseDn { get; set; }
			/// Whether to use secure LDAP (LDAPS)
			public bool useSecureLdap { get; set; }
			/// Service account username used for directory queries (if required)
			public string serviceAccountUser { get; set; }
			/// Service account password (should be stored securely/encrypted)
			public string serviceAccountPassword { get; set; }

			#region Clone 
			public virtual LdapDomainDTO Clone()
			{
				LdapDomainDTO clone = new();

				clone.name = new string(name.ToCharArray());
				clone.description = new string(description.ToCharArray());
				clone.netbiosName = new string(netbiosName.ToCharArray());

				// clone of domainControllers
				clone.domainControllers.AddRange( domainControllers.Select( v => v.Clone() ));
				clone.baseDn = new string(baseDn.ToCharArray());
				clone.useSecureLdap = useSecureLdap;
				clone.serviceAccountUser = new string(serviceAccountUser.ToCharArray());
				clone.serviceAccountPassword = new string(serviceAccountPassword.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( LdapDomainDTO other )
			{
				if (other is null) return false;

				if(name != other.name) return false;
				if(description != other.description) return false;
				if(netbiosName != other.netbiosName) return false;

				// equals of domainControllers
				if(domainControllers.SequenceEqual(other.domainControllers) == false ) return false;
				if(baseDn != other.baseDn) return false;
				if(useSecureLdap != other.useSecureLdap) return false;
				if(serviceAccountUser != other.serviceAccountUser) return false;
				if(serviceAccountPassword != other.serviceAccountPassword) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as LdapDomainDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(name);
				hash.Add(description);
				hash.Add(netbiosName);

				// hash of domainControllers
				foreach( var element_domainControllers in domainControllers)
					hash.Add(element_domainControllers);
				hash.Add(baseDn);
				hash.Add(useSecureLdap);
				hash.Add(serviceAccountUser);
				hash.Add(serviceAccountPassword);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.LdapDomainDTO ToGrpc( IIdentityAdminIF_v1.LdapDomainDTO @this )
			{
				Protos.IdentityAdminIF_v1.LdapDomainDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.Name = @this.name;
				result.Description = @this.description;
				result.NetbiosName = @this.netbiosName;
				result.DomainControllers.AddRange( @this.domainControllers.Select( v => IIdentityAdminIF_v1.LdapDomainDTO.DomainController.ToGrpc( v ) ));
				result.BaseDn = @this.baseDn;
				result.UseSecureLdap = @this.useSecureLdap;
				result.ServiceAccountUser = @this.serviceAccountUser;
				result.ServiceAccountPassword = @this.serviceAccountPassword;

				return result;
			}
			public static IIdentityAdminIF_v1.LdapDomainDTO FromGrpc( Protos.IdentityAdminIF_v1.LdapDomainDTO @from )
			{
				IIdentityAdminIF_v1.LdapDomainDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.name = @from.Name;
				result.description = @from.Description;
				result.netbiosName = @from.NetbiosName;
				result.domainControllers.AddRange( @from.DomainControllers.Select( v => IIdentityAdminIF_v1.LdapDomainDTO.DomainController.FromGrpc(v) ));
				result.baseDn = @from.BaseDn;
				result.useSecureLdap = @from.UseSecureLdap;
				result.serviceAccountUser = @from.ServiceAccountUser;
				result.serviceAccountPassword = @from.ServiceAccountPassword;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class LdapDomainSummaryDTO : IEquatable<LdapDomainSummaryDTO>
		{
			public string id { get; set; }
			/// Fully Qualified Domain Name (e.g. yourdomain.local)
			public string name { get; set; }
			/// Optional description or notes
			public string description { get; set; }

			#region Clone 
			public virtual LdapDomainSummaryDTO Clone()
			{
				LdapDomainSummaryDTO clone = new();

				clone.id = new string(id.ToCharArray());
				clone.name = new string(name.ToCharArray());
				clone.description = new string(description.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( LdapDomainSummaryDTO other )
			{
				if (other is null) return false;

				if(id != other.id) return false;
				if(name != other.name) return false;
				if(description != other.description) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as LdapDomainSummaryDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(name);
				hash.Add(description);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.LdapDomainSummaryDTO ToGrpc( IIdentityAdminIF_v1.LdapDomainSummaryDTO @this )
			{
				Protos.IdentityAdminIF_v1.LdapDomainSummaryDTO result = new();

				result.Id = @this.id;
				result.Name = @this.name;
				result.Description = @this.description;

				return result;
			}
			public static IIdentityAdminIF_v1.LdapDomainSummaryDTO FromGrpc( Protos.IdentityAdminIF_v1.LdapDomainSummaryDTO @from )
			{
				IIdentityAdminIF_v1.LdapDomainSummaryDTO result = new();

				result.id = @from.Id;
				result.name = @from.Name;
				result.description = @from.Description;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class AccountSummaryDTO : IEquatable<AccountSummaryDTO>
		{
			public string id { get; set; }
			public IIdentityAdminIF_v1.AccountTypes Type { get; set; }
			public string Name { get; set; }
			public bool isActive { get; set; }

			#region Clone 
			public virtual AccountSummaryDTO Clone()
			{
				AccountSummaryDTO clone = new();

				clone.Type = Type;
				clone.Name = new string(Name.ToCharArray());
				clone.isActive = isActive;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountSummaryDTO other )
			{
				if (other is null) return false;

				if(Type != other.Type) return false;
				if(Name != other.Name) return false;
				if(isActive != other.isActive) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountSummaryDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(Type);
				hash.Add(Name);
				hash.Add(isActive);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.AccountSummaryDTO ToGrpc( IIdentityAdminIF_v1.AccountSummaryDTO @this )
			{
				Protos.IdentityAdminIF_v1.AccountSummaryDTO result = new();

				result.Id = @this.id;
				result.Type = IIdentityAdminIF_v1.AccountTypesMappings.ToGrpc( @this.Type );
				result.Name = @this.Name;
				result.IsActive = @this.isActive;

				return result;
			}
			public static IIdentityAdminIF_v1.AccountSummaryDTO FromGrpc( Protos.IdentityAdminIF_v1.AccountSummaryDTO @from )
			{
				IIdentityAdminIF_v1.AccountSummaryDTO result = new();

				result.id = @from.Id;
				result.Type = IIdentityAdminIF_v1.AccountTypesMappings.FromGrpc( @from.Type) ;
				result.Name = @from.Name;
				result.isActive = @from.IsActive;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class AccountDTO : IEquatable<AccountDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			public IIdentityAdminIF_v1.AccountDataDTO data { get; set; }

			#region Clone 
			public virtual AccountDTO Clone()
			{
				AccountDTO clone = new();


				// clone of data
				clone.data = data?.Clone();

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountDTO other )
			{
				if (other is null) return false;


				// equals of data
				if(data == null && other.data != null ) return false;
				if(data != null && data.Equals(other.data) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);

				// hash of data
				if(data != null ) hash.Add(data);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.AccountDTO ToGrpc( IIdentityAdminIF_v1.AccountDTO @this )
			{
				Protos.IdentityAdminIF_v1.AccountDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.Data = @this.data != null ? IIdentityAdminIF_v1.AccountDataDTO.ToGrpc( @this.data ) : null;

				return result;
			}
			public static IIdentityAdminIF_v1.AccountDTO FromGrpc( Protos.IdentityAdminIF_v1.AccountDTO @from )
			{
				IIdentityAdminIF_v1.AccountDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.data = @from.Data != null ? IIdentityAdminIF_v1.AccountDataDTO.FromGrpc( @from.Data ) : null;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class AccountDataDTO : IEquatable<AccountDataDTO>
		{
			public IIdentityAdminIF_v1.AccountTypes Type { get; set; }
			public string Name { get; set; }
			public bool isActive { get; set; }
			public List<IIdentityAdminIF_v1.ContactInfo> contacts { get; set; } = new();

			#region Clone 
			public virtual AccountDataDTO Clone()
			{
				AccountDataDTO clone = new();

				clone.Type = Type;
				clone.Name = new string(Name.ToCharArray());
				clone.isActive = isActive;

				// clone of contacts
				clone.contacts.AddRange( contacts.Select( v => v.Clone() ));

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountDataDTO other )
			{
				if (other is null) return false;

				if(Type != other.Type) return false;
				if(Name != other.Name) return false;
				if(isActive != other.isActive) return false;

				// equals of contacts
				if(contacts.SequenceEqual(other.contacts) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountDataDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(Type);
				hash.Add(Name);
				hash.Add(isActive);

				// hash of contacts
				foreach( var element_contacts in contacts)
					hash.Add(element_contacts);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.AccountDataDTO ToGrpc( IIdentityAdminIF_v1.AccountDataDTO @this )
			{
				Protos.IdentityAdminIF_v1.AccountDataDTO result = new();

				result.Type = IIdentityAdminIF_v1.AccountTypesMappings.ToGrpc( @this.Type );
				result.Name = @this.Name;
				result.IsActive = @this.isActive;
				result.Contacts.AddRange( @this.contacts.Select( v => IIdentityAdminIF_v1.ContactInfo.ToGrpc( v ) ));

				return result;
			}
			public static IIdentityAdminIF_v1.AccountDataDTO FromGrpc( Protos.IdentityAdminIF_v1.AccountDataDTO @from )
			{
				IIdentityAdminIF_v1.AccountDataDTO result = new();

				result.Type = IIdentityAdminIF_v1.AccountTypesMappings.FromGrpc( @from.Type) ;
				result.Name = @from.Name;
				result.isActive = @from.IsActive;
				result.contacts.AddRange( @from.Contacts.Select( v => IIdentityAdminIF_v1.ContactInfo.FromGrpc(v) ));

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class ContactInfo : IEquatable<ContactInfo>
		{
			public string contactType { get; set; }
			public string email { get; set; }
			public string phoneNumber { get; set; }

			#region Clone 
			public virtual ContactInfo Clone()
			{
				ContactInfo clone = new();

				clone.contactType = new string(contactType.ToCharArray());
				clone.email = new string(email.ToCharArray());
				clone.phoneNumber = new string(phoneNumber.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ContactInfo other )
			{
				if (other is null) return false;

				if(contactType != other.contactType) return false;
				if(email != other.email) return false;
				if(phoneNumber != other.phoneNumber) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ContactInfo);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(contactType);
				hash.Add(email);
				hash.Add(phoneNumber);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.ContactInfo ToGrpc( IIdentityAdminIF_v1.ContactInfo @this )
			{
				Protos.IdentityAdminIF_v1.ContactInfo result = new();

				result.ContactType = @this.contactType;
				result.Email = @this.email;
				result.PhoneNumber = @this.phoneNumber;

				return result;
			}
			public static IIdentityAdminIF_v1.ContactInfo FromGrpc( Protos.IdentityAdminIF_v1.ContactInfo @from )
			{
				IIdentityAdminIF_v1.ContactInfo result = new();

				result.contactType = @from.ContactType;
				result.email = @from.Email;
				result.phoneNumber = @from.PhoneNumber;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class AuthDTO : IEquatable<AuthDTO>
		{
			public enum Methods
			{
				Email,
				ActiveDirectory,
				KAU,
				Certificate,
			}
			#region GrpcMapping
			public static class MethodsMappings
			{
				public static Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods ToGrpc( IIdentityAdminIF_v1.AuthDTO.Methods @this )
				{
					return @this switch
					{
						IIdentityAdminIF_v1.AuthDTO.Methods.Email => Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.Email,
						IIdentityAdminIF_v1.AuthDTO.Methods.ActiveDirectory => Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.ActiveDirectory,
						IIdentityAdminIF_v1.AuthDTO.Methods.KAU => Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.Kau,
						IIdentityAdminIF_v1.AuthDTO.Methods.Certificate => Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.Certificate,
						_ => throw new NotImplementedException(), 
					};
				}

				public static IIdentityAdminIF_v1.AuthDTO.Methods FromGrpc( Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods @this )
				{
					return @this switch
					{
						Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.Email => IIdentityAdminIF_v1.AuthDTO.Methods.Email,
						Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.ActiveDirectory => IIdentityAdminIF_v1.AuthDTO.Methods.ActiveDirectory,
						Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.Kau => IIdentityAdminIF_v1.AuthDTO.Methods.KAU,
						Protos.IdentityAdminIF_v1.AuthDTO.Types.Methods.Certificate => IIdentityAdminIF_v1.AuthDTO.Methods.Certificate,
						_ => throw new NotImplementedException(), 
					};
				}

			}
			#endregion GrpcMapping
			public string id { get; set; }
			public IIdentityAdminIF_v1.AuthDTO.Methods method { get; set; }
			public bool isActive { get; set; }

			#region Clone 
			public virtual AuthDTO Clone()
			{
				AuthDTO clone = new();

				clone.method = method;
				clone.isActive = isActive;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AuthDTO other )
			{
				if (other is null) return false;

				if(method != other.method) return false;
				if(isActive != other.isActive) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AuthDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(method);
				hash.Add(isActive);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.AuthDTO ToGrpc( IIdentityAdminIF_v1.AuthDTO @this )
			{
				Protos.IdentityAdminIF_v1.AuthDTO result = new();

				result.Id = @this.id;
				result.Method = IIdentityAdminIF_v1.AuthDTO.MethodsMappings.ToGrpc( @this.method );
				result.IsActive = @this.isActive;

				return result;
			}
			public static IIdentityAdminIF_v1.AuthDTO FromGrpc( Protos.IdentityAdminIF_v1.AuthDTO @from )
			{
				IIdentityAdminIF_v1.AuthDTO result = new();

				result.id = @from.Id;
				result.method = IIdentityAdminIF_v1.AuthDTO.MethodsMappings.FromGrpc( @from.Method) ;
				result.isActive = @from.IsActive;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class TwoFactorConfigurationDTO : IEquatable<TwoFactorConfigurationDTO>
		{
			public enum Methods
			{
				/// Time-based One-Time Password (e.g. Google Authenticator)
				TOTP,

				/// SMS-based OTP
				SMS,

				/// Email-based OTP
				Email,

			}
			#region GrpcMapping
			public static class MethodsMappings
			{
				public static Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods ToGrpc( IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods @this )
				{
					return @this switch
					{
						IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods.TOTP => Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods.Totp,
						IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods.SMS => Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods.Sms,
						IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods.Email => Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods.Email,
						_ => throw new NotImplementedException(), 
					};
				}

				public static IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods FromGrpc( Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods @this )
				{
					return @this switch
					{
						Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods.Totp => IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods.TOTP,
						Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods.Sms => IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods.SMS,
						Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO.Types.Methods.Email => IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods.Email,
						_ => throw new NotImplementedException(), 
					};
				}

			}
			#endregion GrpcMapping
			public bool enabled { get; set; }
			public IIdentityAdminIF_v1.TwoFactorConfigurationDTO.Methods method { get; set; }
			public string phoneNumber { get; set; }
			public string email { get; set; }

			#region Clone 
			public virtual TwoFactorConfigurationDTO Clone()
			{
				TwoFactorConfigurationDTO clone = new();

				clone.enabled = enabled;
				clone.method = method;
				clone.phoneNumber = new string(phoneNumber.ToCharArray());
				clone.email = new string(email.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( TwoFactorConfigurationDTO other )
			{
				if (other is null) return false;

				if(enabled != other.enabled) return false;
				if(method != other.method) return false;
				if(phoneNumber != other.phoneNumber) return false;
				if(email != other.email) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as TwoFactorConfigurationDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(enabled);
				hash.Add(method);
				hash.Add(phoneNumber);
				hash.Add(email);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO ToGrpc( IIdentityAdminIF_v1.TwoFactorConfigurationDTO @this )
			{
				Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO result = new();

				result.Enabled = @this.enabled;
				result.Method = IIdentityAdminIF_v1.TwoFactorConfigurationDTO.MethodsMappings.ToGrpc( @this.method );
				result.PhoneNumber = @this.phoneNumber;
				result.Email = @this.email;

				return result;
			}
			public static IIdentityAdminIF_v1.TwoFactorConfigurationDTO FromGrpc( Protos.IdentityAdminIF_v1.TwoFactorConfigurationDTO @from )
			{
				IIdentityAdminIF_v1.TwoFactorConfigurationDTO result = new();

				result.enabled = @from.Enabled;
				result.method = IIdentityAdminIF_v1.TwoFactorConfigurationDTO.MethodsMappings.FromGrpc( @from.Method) ;
				result.phoneNumber = @from.PhoneNumber;
				result.email = @from.Email;

				return result;
			}
			#endregion GrpcMapping
		}

		/// Password-based authentication
		public partial class EmailAuthDTO : IEquatable<EmailAuthDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			public bool isActive { get; set; }
			public string email { get; set; }
			public bool isEmailConfirmed { get; set; }
			public DateOnly passwordExpiresAt { get; set; }
			public IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor { get; set; }

			#region Clone 
			public virtual EmailAuthDTO Clone()
			{
				EmailAuthDTO clone = new();

				clone.isActive = isActive;
				clone.email = new string(email.ToCharArray());
				clone.isEmailConfirmed = isEmailConfirmed;
				clone.passwordExpiresAt = passwordExpiresAt;

				// clone of twoFactor
				clone.twoFactor = twoFactor?.Clone();

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( EmailAuthDTO other )
			{
				if (other is null) return false;

				if(isActive != other.isActive) return false;
				if(email != other.email) return false;
				if(isEmailConfirmed != other.isEmailConfirmed) return false;
				if(passwordExpiresAt != other.passwordExpiresAt) return false;

				// equals of twoFactor
				if(twoFactor == null && other.twoFactor != null ) return false;
				if(twoFactor != null && twoFactor.Equals(other.twoFactor) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as EmailAuthDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(isActive);
				hash.Add(email);
				hash.Add(isEmailConfirmed);
				hash.Add(passwordExpiresAt);

				// hash of twoFactor
				if(twoFactor != null ) hash.Add(twoFactor);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.EmailAuthDTO ToGrpc( IIdentityAdminIF_v1.EmailAuthDTO @this )
			{
				Protos.IdentityAdminIF_v1.EmailAuthDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.IsActive = @this.isActive;
				result.Email = @this.email;
				result.IsEmailConfirmed = @this.isEmailConfirmed;
				result.PasswordExpiresAt = @this.passwordExpiresAt.ToString( "yyyy-MM-dd", CultureInfo.InvariantCulture);
				result.TwoFactor = @this.twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( @this.twoFactor ) : null;

				return result;
			}
			public static IIdentityAdminIF_v1.EmailAuthDTO FromGrpc( Protos.IdentityAdminIF_v1.EmailAuthDTO @from )
			{
				IIdentityAdminIF_v1.EmailAuthDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.isActive = @from.IsActive;
				result.email = @from.Email;
				result.isEmailConfirmed = @from.IsEmailConfirmed;
				result.passwordExpiresAt = DateOnly.Parse(@from.PasswordExpiresAt, CultureInfo.InvariantCulture);
				result.twoFactor = @from.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( @from.TwoFactor ) : null;

				return result;
			}
			#endregion GrpcMapping
		}

		/// Active Directory-based authentication
		public partial class ADAuthDTO : IEquatable<ADAuthDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			public bool isActive { get; set; }
			/// Active Directory domain
			public string LdapDomainId { get; set; }
			public string LdapDomainName { get; set; }
			/// Active Directory username
			public string userName { get; set; }
			/// Optional two-factor authentication settings (TOTP, SMS, Email)
			public IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor { get; set; }

			#region Clone 
			public virtual ADAuthDTO Clone()
			{
				ADAuthDTO clone = new();

				clone.isActive = isActive;
				clone.LdapDomainId = new string(LdapDomainId.ToCharArray());
				clone.LdapDomainName = new string(LdapDomainName.ToCharArray());
				clone.userName = new string(userName.ToCharArray());

				// clone of twoFactor
				clone.twoFactor = twoFactor?.Clone();

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ADAuthDTO other )
			{
				if (other is null) return false;

				if(isActive != other.isActive) return false;
				if(LdapDomainId != other.LdapDomainId) return false;
				if(LdapDomainName != other.LdapDomainName) return false;
				if(userName != other.userName) return false;

				// equals of twoFactor
				if(twoFactor == null && other.twoFactor != null ) return false;
				if(twoFactor != null && twoFactor.Equals(other.twoFactor) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ADAuthDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(isActive);
				hash.Add(LdapDomainId);
				hash.Add(LdapDomainName);
				hash.Add(userName);

				// hash of twoFactor
				if(twoFactor != null ) hash.Add(twoFactor);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.ADAuthDTO ToGrpc( IIdentityAdminIF_v1.ADAuthDTO @this )
			{
				Protos.IdentityAdminIF_v1.ADAuthDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.IsActive = @this.isActive;
				result.LdapDomainId = @this.LdapDomainId;
				result.LdapDomainName = @this.LdapDomainName;
				result.UserName = @this.userName;
				result.TwoFactor = @this.twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( @this.twoFactor ) : null;

				return result;
			}
			public static IIdentityAdminIF_v1.ADAuthDTO FromGrpc( Protos.IdentityAdminIF_v1.ADAuthDTO @from )
			{
				IIdentityAdminIF_v1.ADAuthDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.isActive = @from.IsActive;
				result.LdapDomainId = @from.LdapDomainId;
				result.LdapDomainName = @from.LdapDomainName;
				result.userName = @from.UserName;
				result.twoFactor = @from.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( @from.TwoFactor ) : null;

				return result;
			}
			#endregion GrpcMapping
		}

		/// KAU Ügyfélkapu authentication
		public partial class KAUAuthDTO : IEquatable<KAUAuthDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			public bool isActive { get; set; }
			/// Government-issued unique identifier (Ügyfélkapu ID)
			public string KAUUserId { get; set; }
			/// User’s full legal name as returned by the service
			public string legalName { get; set; }
			/// Email address verified by the service (optional)
			public string email { get; set; }
			/// Optional two-factor authentication settings (TOTP, SMS, Email)
			public IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor { get; set; }

			#region Clone 
			public virtual KAUAuthDTO Clone()
			{
				KAUAuthDTO clone = new();

				clone.isActive = isActive;
				clone.KAUUserId = new string(KAUUserId.ToCharArray());
				clone.legalName = new string(legalName.ToCharArray());
				clone.email = new string(email.ToCharArray());

				// clone of twoFactor
				clone.twoFactor = twoFactor?.Clone();

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( KAUAuthDTO other )
			{
				if (other is null) return false;

				if(isActive != other.isActive) return false;
				if(KAUUserId != other.KAUUserId) return false;
				if(legalName != other.legalName) return false;
				if(email != other.email) return false;

				// equals of twoFactor
				if(twoFactor == null && other.twoFactor != null ) return false;
				if(twoFactor != null && twoFactor.Equals(other.twoFactor) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as KAUAuthDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(isActive);
				hash.Add(KAUUserId);
				hash.Add(legalName);
				hash.Add(email);

				// hash of twoFactor
				if(twoFactor != null ) hash.Add(twoFactor);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.KAUAuthDTO ToGrpc( IIdentityAdminIF_v1.KAUAuthDTO @this )
			{
				Protos.IdentityAdminIF_v1.KAUAuthDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.IsActive = @this.isActive;
				result.KAUUserId = @this.KAUUserId;
				result.LegalName = @this.legalName;
				result.Email = @this.email;
				result.TwoFactor = @this.twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( @this.twoFactor ) : null;

				return result;
			}
			public static IIdentityAdminIF_v1.KAUAuthDTO FromGrpc( Protos.IdentityAdminIF_v1.KAUAuthDTO @from )
			{
				IIdentityAdminIF_v1.KAUAuthDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.isActive = @from.IsActive;
				result.KAUUserId = @from.KAUUserId;
				result.legalName = @from.LegalName;
				result.email = @from.Email;
				result.twoFactor = @from.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( @from.TwoFactor ) : null;

				return result;
			}
			#endregion GrpcMapping
		}

		/// Certificate-based authentication
		public partial class CertificateAuthDTO : IEquatable<CertificateAuthDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			public bool isActive { get; set; }
			public string certificateThumbprint { get; set; }
			public string serialNumber { get; set; }
			public string issuer { get; set; }
			public string subject { get; set; }
			public string publicKeyHash { get; set; }
			public DateTime validFrom { get; set; }
			public DateTime validUntil { get; set; }
			public bool isRevoked { get; set; }
			public string revocationReason { get; set; }
			public DateTime revokedAt { get; set; }

			#region Clone 
			public virtual CertificateAuthDTO Clone()
			{
				CertificateAuthDTO clone = new();

				clone.isActive = isActive;
				clone.certificateThumbprint = new string(certificateThumbprint.ToCharArray());
				clone.serialNumber = new string(serialNumber.ToCharArray());
				clone.issuer = new string(issuer.ToCharArray());
				clone.subject = new string(subject.ToCharArray());
				clone.publicKeyHash = new string(publicKeyHash.ToCharArray());
				clone.validFrom = validFrom;
				clone.validUntil = validUntil;
				clone.isRevoked = isRevoked;
				clone.revocationReason = new string(revocationReason.ToCharArray());
				clone.revokedAt = revokedAt;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( CertificateAuthDTO other )
			{
				if (other is null) return false;

				if(isActive != other.isActive) return false;
				if(certificateThumbprint != other.certificateThumbprint) return false;
				if(serialNumber != other.serialNumber) return false;
				if(issuer != other.issuer) return false;
				if(subject != other.subject) return false;
				if(publicKeyHash != other.publicKeyHash) return false;
				if(validFrom != other.validFrom) return false;
				if(validUntil != other.validUntil) return false;
				if(isRevoked != other.isRevoked) return false;
				if(revocationReason != other.revocationReason) return false;
				if(revokedAt != other.revokedAt) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as CertificateAuthDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(isActive);
				hash.Add(certificateThumbprint);
				hash.Add(serialNumber);
				hash.Add(issuer);
				hash.Add(subject);
				hash.Add(publicKeyHash);
				hash.Add(validFrom);
				hash.Add(validUntil);
				hash.Add(isRevoked);
				hash.Add(revocationReason);
				hash.Add(revokedAt);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.CertificateAuthDTO ToGrpc( IIdentityAdminIF_v1.CertificateAuthDTO @this )
			{
				Protos.IdentityAdminIF_v1.CertificateAuthDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.IsActive = @this.isActive;
				result.CertificateThumbprint = @this.certificateThumbprint;
				result.SerialNumber = @this.serialNumber;
				result.Issuer = @this.issuer;
				result.Subject = @this.subject;
				result.PublicKeyHash = @this.publicKeyHash;
				result.ValidFrom = Timestamp.FromDateTime(@this.validFrom);
				result.ValidUntil = Timestamp.FromDateTime(@this.validUntil);
				result.IsRevoked = @this.isRevoked;
				result.RevocationReason = @this.revocationReason;
				result.RevokedAt = Timestamp.FromDateTime(@this.revokedAt);

				return result;
			}
			public static IIdentityAdminIF_v1.CertificateAuthDTO FromGrpc( Protos.IdentityAdminIF_v1.CertificateAuthDTO @from )
			{
				IIdentityAdminIF_v1.CertificateAuthDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.isActive = @from.IsActive;
				result.certificateThumbprint = @from.CertificateThumbprint;
				result.serialNumber = @from.SerialNumber;
				result.issuer = @from.Issuer;
				result.subject = @from.Subject;
				result.publicKeyHash = @from.PublicKeyHash;
				result.validFrom = @from.ValidFrom.ToDateTime();
				result.validUntil = @from.ValidUntil.ToDateTime();
				result.isRevoked = @from.IsRevoked;
				result.revocationReason = @from.RevocationReason;
				result.revokedAt = @from.RevokedAt.ToDateTime();

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class CsrInputDTO : IEquatable<CsrInputDTO>
		{
			public string csrPem { get; set; }
			/// CA profil/sablon (opcionális)
			public string profile { get; set; }

			#region Clone 
			public virtual CsrInputDTO Clone()
			{
				CsrInputDTO clone = new();

				clone.csrPem = new string(csrPem.ToCharArray());
				clone.profile = new string(profile.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( CsrInputDTO other )
			{
				if (other is null) return false;

				if(csrPem != other.csrPem) return false;
				if(profile != other.profile) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as CsrInputDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(csrPem);
				hash.Add(profile);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.CsrInputDTO ToGrpc( IIdentityAdminIF_v1.CsrInputDTO @this )
			{
				Protos.IdentityAdminIF_v1.CsrInputDTO result = new();

				result.CsrPem = @this.csrPem;
				result.Profile = @this.profile;

				return result;
			}
			public static IIdentityAdminIF_v1.CsrInputDTO FromGrpc( Protos.IdentityAdminIF_v1.CsrInputDTO @from )
			{
				IIdentityAdminIF_v1.CsrInputDTO result = new();

				result.csrPem = @from.CsrPem;
				result.profile = @from.Profile;

				return result;
			}
			#endregion GrpcMapping
		}

	}
}
