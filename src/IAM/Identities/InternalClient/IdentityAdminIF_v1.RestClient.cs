
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using ServiceKit.Net;
using System.Net;
using System.Net.Http.Json;
using System.Text.Json;

namespace IAM.Identities
{
	public class IdentityAdminIF_v1_RestClient : IIdentityAdminIF_v1 
	{
		private readonly HttpClient _httpClient;

		IdentityAdminIF_v1_RestClient( string serverAddress )
		{
			_httpClient = new HttpClient();
			_httpClient.BaseAddress = new Uri( serverAddress );
			_httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.RegisterLdapDomain(CallingContext ctx, IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/None" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "RegisterLdapDomain" );

				// build content
				request.Content = new StringContent( JsonSerializer.Serialize<IIdentityAdminIF_v1.LdapDomainDTO>( ldap ));

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.LdapDomainDTO>();
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_RegisterLdapDomain'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>> IIdentityAdminIF_v1.GetAllRegisteredLdapDomain(CallingContext ctx)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/None" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "GetAllRegisteredLdapDomain" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>();
					return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( error );
				}
				else
				{
					return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_GetAllRegisteredLdapDomain'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.GetRegisteredLdapDomain(CallingContext ctx, string id)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/getregisteredldapdomain/{id}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "GetRegisteredLdapDomain" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.LdapDomainDTO>();
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_GetRegisteredLdapDomain'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.UpdateRegisteredLdapDomain(CallingContext ctx, IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/None" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "UpdateRegisteredLdapDomain" );

				// build content
				request.Content = new StringContent( JsonSerializer.Serialize<IIdentityAdminIF_v1.LdapDomainDTO>( ldap ));

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.LdapDomainDTO>();
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_UpdateRegisteredLdapDomain'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>> IIdentityAdminIF_v1.getAllAccount(CallingContext ctx)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/None" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "getAllAccount" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<List<IIdentityAdminIF_v1.AccountSummaryDTO>>();
					return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( error );
				}
				else
				{
					return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getAllAccount'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.getAccount(CallingContext ctx, string id)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/getaccount/{id}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "getAccount" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.AccountDTO>();
					return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getAccount'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.createAccount(CallingContext ctx, string username, IIdentityAdminIF_v1.AccountTypes accountType)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/createaccount/{username}?_str_accountType={accountType.ToString()}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "createAccount" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.AccountDTO>();
					return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_createAccount'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.updateAccount(CallingContext ctx, string accountId, string etag, IIdentityAdminIF_v1.AccountDataDTO data)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/updateaccount/{accountId}/{etag}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "updateAccount" );

				// build content
				request.Content = new StringContent( JsonSerializer.Serialize<IIdentityAdminIF_v1.AccountDataDTO>( data ));

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.AccountDTO>();
					return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_updateAccount'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.AuthDTO>>> IIdentityAdminIF_v1.listAuthsForAccount(CallingContext ctx, string accountId)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/listauthsforaccount/{accountId}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "listAuthsForAccount" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<List<IIdentityAdminIF_v1.AuthDTO>>();
					return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( error );
				}
				else
				{
					return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_listAuthsForAccount'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>> IIdentityAdminIF_v1.getEmailAndPasswordAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/getemailandpasswordauth/{accountId}/{authId}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "getEmailAndPasswordAuth" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>();
					return Response<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getEmailAndPasswordAuth'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAndPasswordAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> IIdentityAdminIF_v1.getADAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/getadauth/{accountId}/{authId}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "getADAuth" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.ADAuthDTO>();
					return Response<IIdentityAdminIF_v1.ADAuthDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getADAuth'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> IIdentityAdminIF_v1.getKAUAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/getkauauth/{accountId}/{authId}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "getKAUAuth" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.KAUAuthDTO>();
					return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getKAUAuth'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> IIdentityAdminIF_v1.getCertificateAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/identityadminif/v1/getcertificateauth/{accountId}/{authId}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesIdentityAdminIF_v1", "getCertificateAuth" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IIdentityAdminIF_v1.CertificateAuthDTO>();
					return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( error );
				}
				else
				{
					return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getCertificateAuth'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
