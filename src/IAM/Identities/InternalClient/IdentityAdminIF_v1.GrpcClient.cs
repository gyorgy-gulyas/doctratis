
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using IAM.Identities;
using IAM.Identities.Protos.IdentityAdminIF_v1;
using ServiceKit.Net;

namespace IAM.Identities
{
	public class IdentityAdminIF_v1_GrpcClient : IIdentityAdminIF_v1 
	{
		private readonly GrpcChannel _channel;
		private readonly IdentityAdminIF_v1.IdentityAdminIF_v1Client _client;

		IdentityAdminIF_v1_GrpcClient( string serverAddress )
		{
			_channel = GrpcChannel.ForAddress(serverAddress);
			_client = new IdentityAdminIF_v1.IdentityAdminIF_v1Client(_channel);
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.RegisterLdapDomain(CallingContext ctx, IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_RegisterLdapDomainRequest();
				request.Ldap = ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( ldap ) : null;

				// calling grpc client
				var grpc_response = await _client.RegisterLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "RegisterLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_RegisterLdapDomainResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.LdapDomainDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );

					case IdentityAdminIF_v1_RegisterLdapDomainResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_RegisterLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_RegisterLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.UpdateRegisteredLdapDomain(CallingContext ctx, IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_UpdateRegisteredLdapDomainRequest();
				request.Ldap = ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( ldap ) : null;

				// calling grpc client
				var grpc_response = await _client.UpdateRegisteredLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "UpdateRegisteredLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.LdapDomainDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );

					case IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_UpdateRegisteredLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>> IIdentityAdminIF_v1.GetAllRegisteredLdapDomain(CallingContext ctx)
		{
			try
			{
				// fill grpc request
				var request = new Empty();

				// calling grpc client
				var grpc_response = await _client.GetAllRegisteredLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "GetAllRegisteredLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse.ResultOneofCase.Value:
						List<IIdentityAdminIF_v1.LdapDomainSummaryDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IIdentityAdminIF_v1.LdapDomainSummaryDTO.FromGrpc(v) ));
						return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Success( value );

					case IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse.ResultOneofCase.Error:
						return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_GetAllRegisteredLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.GetRegisteredLdapDomain(CallingContext ctx, string id)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_GetRegisteredLdapDomainRequest();
				request.Id = id;

				// calling grpc client
				var grpc_response = await _client.GetRegisteredLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "GetRegisteredLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_GetRegisteredLdapDomainResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.LdapDomainDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );

					case IdentityAdminIF_v1_GetRegisteredLdapDomainResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_GetRegisteredLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_GetRegisteredLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>> IIdentityAdminIF_v1.getAllAccount(CallingContext ctx)
		{
			try
			{
				// fill grpc request
				var request = new Empty();

				// calling grpc client
				var grpc_response = await _client.getAllAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "getAllAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getAllAccountResponse.ResultOneofCase.Value:
						List<IIdentityAdminIF_v1.AccountSummaryDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IIdentityAdminIF_v1.AccountSummaryDTO.FromGrpc(v) ));
						return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Success( value );

					case IdentityAdminIF_v1_getAllAccountResponse.ResultOneofCase.Error:
						return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getAllAccountResponse.ResultOneofCase.None:
					default:
						return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getAllAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.getAccount(CallingContext ctx, string id)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_getAccountRequest();
				request.Id = id;

				// calling grpc client
				var grpc_response = await _client.getAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "getAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getAccountResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.AccountDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.AccountDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );

					case IdentityAdminIF_v1_getAccountResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getAccountResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.createAccount(CallingContext ctx, string username, IIdentityAdminIF_v1.AccountTypes accountType)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_createAccountRequest();
				request.Username = username;
				request.AccountType = IIdentityAdminIF_v1.AccountTypesMappings.ToGrpc( accountType );

				// calling grpc client
				var grpc_response = await _client.createAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "createAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_createAccountResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.AccountDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.AccountDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );

					case IdentityAdminIF_v1_createAccountResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_createAccountResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_createAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.updateAccount(CallingContext ctx, string accountId, string etag, IIdentityAdminIF_v1.AccountDataDTO data)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_updateAccountRequest();
				request.AccountId = accountId;
				request.Etag = etag;
				request.Data = data != null ? IIdentityAdminIF_v1.AccountDataDTO.ToGrpc( data ) : null;

				// calling grpc client
				var grpc_response = await _client.updateAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "updateAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_updateAccountResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.AccountDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.AccountDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );

					case IdentityAdminIF_v1_updateAccountResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_updateAccountResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_updateAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.AuthDTO>>> IIdentityAdminIF_v1.listAuthsForAccount(CallingContext ctx, string accountId)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_listAuthsForAccountRequest();
				request.AccountId = accountId;

				// calling grpc client
				var grpc_response = await _client.listAuthsForAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "listAuthsForAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_listAuthsForAccountResponse.ResultOneofCase.Value:
						List<IIdentityAdminIF_v1.AuthDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IIdentityAdminIF_v1.AuthDTO.FromGrpc(v) ));
						return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Success( value );

					case IdentityAdminIF_v1_listAuthsForAccountResponse.ResultOneofCase.Error:
						return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_listAuthsForAccountResponse.ResultOneofCase.None:
					default:
						return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_listAuthsForAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.AuthDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AuthDTO>> IIdentityAdminIF_v1.setActiveForAuth(CallingContext ctx, string accountId, string authId, string etag, bool isActive)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_setActiveForAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;
				request.Etag = etag;
				request.IsActive = isActive;

				// calling grpc client
				var grpc_response = await _client.setActiveForAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "setActiveForAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_setActiveForAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.AuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.AuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.AuthDTO>.Success( value );

					case IdentityAdminIF_v1_setActiveForAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.AuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_setActiveForAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.AuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_setActiveForAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.AuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> IIdentityAdminIF_v1.createtEmailAuth(CallingContext ctx, string accountId, string email, string initialPassword, IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_createtEmailAuthRequest();
				request.AccountId = accountId;
				request.Email = email;
				request.InitialPassword = initialPassword;
				request.TwoFactor = twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( twoFactor ) : null;

				// calling grpc client
				var grpc_response = await _client.createtEmailAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "createtEmailAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_createtEmailAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.EmailAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Success( value );

					case IdentityAdminIF_v1_createtEmailAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_createtEmailAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_createtEmailAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> IIdentityAdminIF_v1.getEmailAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_getEmailAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;

				// calling grpc client
				var grpc_response = await _client.getEmailAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "getEmailAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getEmailAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.EmailAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Success( value );

					case IdentityAdminIF_v1_getEmailAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getEmailAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getEmailAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> IIdentityAdminIF_v1.changePasswordOnEmailAuth(CallingContext ctx, string accountId, string authId, string etag, string newPassword)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_changePasswordOnEmailAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;
				request.Etag = etag;
				request.NewPassword = newPassword;

				// calling grpc client
				var grpc_response = await _client.changePasswordOnEmailAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "changePasswordOnEmailAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_changePasswordOnEmailAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.EmailAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Success( value );

					case IdentityAdminIF_v1_changePasswordOnEmailAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_changePasswordOnEmailAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_changePasswordOnEmailAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.EmailAuthDTO>> IIdentityAdminIF_v1.setTwoFactorOnEmailAuth(CallingContext ctx, string accountId, string authId, string etag, IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_setTwoFactorOnEmailAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;
				request.Etag = etag;
				request.TwoFactor = twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( twoFactor ) : null;

				// calling grpc client
				var grpc_response = await _client.setTwoFactorOnEmailAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "setTwoFactorOnEmailAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.EmailAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Success( value );

					case IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_setTwoFactorOnEmailAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.EmailAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<bool>> IIdentityAdminIF_v1.confirmEmail(CallingContext ctx, string token)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_confirmEmailRequest();
				request.Token = token;

				// calling grpc client
				var grpc_response = await _client.confirmEmailAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "confirmEmail" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_confirmEmailResponse.ResultOneofCase.Value:
						bool value;
						value = grpc_response.Value;
						return Response<bool>.Success( value );

					case IdentityAdminIF_v1_confirmEmailResponse.ResultOneofCase.Error:
						return Response<bool>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_confirmEmailResponse.ResultOneofCase.None:
					default:
						return Response<bool>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_confirmEmail'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<bool>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<bool>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> IIdentityAdminIF_v1.createADAuth(CallingContext ctx, string accountId, string ldapDomainId, string adUsername, IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_createADAuthRequest();
				request.AccountId = accountId;
				request.LdapDomainId = ldapDomainId;
				request.AdUsername = adUsername;
				request.TwoFactor = twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( twoFactor ) : null;

				// calling grpc client
				var grpc_response = await _client.createADAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "createADAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_createADAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.ADAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.ADAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Success( value );

					case IdentityAdminIF_v1_createADAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_createADAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_createADAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> IIdentityAdminIF_v1.getADAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_getADAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;

				// calling grpc client
				var grpc_response = await _client.getADAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "getADAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getADAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.ADAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.ADAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Success( value );

					case IdentityAdminIF_v1_getADAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getADAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getADAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.ADAuthDTO>> IIdentityAdminIF_v1.setTwoFactorOnADAuth(CallingContext ctx, string accountId, string authId, string etag, IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_setTwoFactorOnADAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;
				request.Etag = etag;
				request.TwoFactor = twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( twoFactor ) : null;

				// calling grpc client
				var grpc_response = await _client.setTwoFactorOnADAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "setTwoFactorOnADAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_setTwoFactorOnADAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.ADAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.ADAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Success( value );

					case IdentityAdminIF_v1_setTwoFactorOnADAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_setTwoFactorOnADAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_setTwoFactorOnADAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.ADAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> IIdentityAdminIF_v1.createKAUAuth(CallingContext ctx, string accountId, string kauUserId, IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_createKAUAuthRequest();
				request.AccountId = accountId;
				request.KauUserId = kauUserId;
				request.TwoFactor = twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( twoFactor ) : null;

				// calling grpc client
				var grpc_response = await _client.createKAUAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "createKAUAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_createKAUAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.KAUAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.KAUAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Success( value );

					case IdentityAdminIF_v1_createKAUAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_createKAUAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_createKAUAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> IIdentityAdminIF_v1.getKAUAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_getKAUAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;

				// calling grpc client
				var grpc_response = await _client.getKAUAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "getKAUAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getKAUAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.KAUAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.KAUAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Success( value );

					case IdentityAdminIF_v1_getKAUAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getKAUAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getKAUAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.KAUAuthDTO>> IIdentityAdminIF_v1.setTwoFactorOnKAUAuth(CallingContext ctx, string accountId, string authId, string etag, IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_setTwoFactorOnKAUAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;
				request.Etag = etag;
				request.TwoFactor = twoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.ToGrpc( twoFactor ) : null;

				// calling grpc client
				var grpc_response = await _client.setTwoFactorOnKAUAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "setTwoFactorOnKAUAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.KAUAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.KAUAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Success( value );

					case IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_setTwoFactorOnKAUAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.KAUAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> IIdentityAdminIF_v1.createCertificateAuthFromCSR(CallingContext ctx, string accountId, IIdentityAdminIF_v1.CsrInputDTO data)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_createCertificateAuthFromCSRRequest();
				request.AccountId = accountId;
				request.Data = data != null ? IIdentityAdminIF_v1.CsrInputDTO.ToGrpc( data ) : null;

				// calling grpc client
				var grpc_response = await _client.createCertificateAuthFromCSRAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "createCertificateAuthFromCSR" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_createCertificateAuthFromCSRResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.CertificateAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.CertificateAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Success( value );

					case IdentityAdminIF_v1_createCertificateAuthFromCSRResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_createCertificateAuthFromCSRResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_createCertificateAuthFromCSR'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> IIdentityAdminIF_v1.revokeCertificate(CallingContext ctx, string accountId, string authId, string etag, string reason)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_revokeCertificateRequest();
				request.AccountId = accountId;
				request.AuthId = authId;
				request.Etag = etag;
				request.Reason = reason;

				// calling grpc client
				var grpc_response = await _client.revokeCertificateAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "revokeCertificate" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_revokeCertificateResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.CertificateAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.CertificateAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Success( value );

					case IdentityAdminIF_v1_revokeCertificateResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_revokeCertificateResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_revokeCertificate'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.CertificateAuthDTO>> IIdentityAdminIF_v1.getCertificateAuth(CallingContext ctx, string accountId, string authId)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_getCertificateAuthRequest();
				request.AccountId = accountId;
				request.AuthId = authId;

				// calling grpc client
				var grpc_response = await _client.getCertificateAuthAsync( request, new CallOptions(ctx.ToGrpcMetadata( "IAM.IdentitiesIdentityAdminIF_v1", "getCertificateAuth" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getCertificateAuthResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.CertificateAuthDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.CertificateAuthDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Success( value );

					case IdentityAdminIF_v1_getCertificateAuthResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getCertificateAuthResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getCertificateAuth'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.CertificateAuthDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
