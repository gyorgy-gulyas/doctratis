
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using ServiceKit.Net;
using System.Net;
using System.Net.Http.Json;

namespace IAM.Identities
{
	public class LoginIF_v1_RestClient : ILoginIF_v1 
	{
		private readonly HttpClient _httpClient;

		LoginIF_v1_RestClient( string serverAddress )
		{
			_httpClient = new HttpClient();
			_httpClient.BaseAddress = new Uri( serverAddress );
			_httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
		}

		/// <inheritdoc />
		async Task<Response<ILoginIF_v1.LoginResultDTO>> ILoginIF_v1.LoginWithEmailPassword(CallingContext ctx, string email, string password)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/loginif/v1/loginwithemailpassword/{email}/{password}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesLoginIF_v1", "LoginWithEmailPassword" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<ILoginIF_v1.LoginResultDTO>();
					return Response<ILoginIF_v1.LoginResultDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<ILoginIF_v1.LoginResultDTO>.Failure( error );
				}
				else
				{
					return Response<ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_LoginWithEmailPassword'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<ILoginIF_v1.LoginResultDTO>> ILoginIF_v1.LoginWithAD(CallingContext ctx, string username, string password)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/loginif/v1/loginwithad/{username}/{password}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesLoginIF_v1", "LoginWithAD" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<ILoginIF_v1.LoginResultDTO>();
					return Response<ILoginIF_v1.LoginResultDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<ILoginIF_v1.LoginResultDTO>.Failure( error );
				}
				else
				{
					return Response<ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_LoginWithAD'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<ILoginIF_v1.TokensDTO>> ILoginIF_v1.Login2FA(CallingContext ctx, string code)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/loginif/v1/login2fa/{code}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesLoginIF_v1", "Login2FA" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<ILoginIF_v1.TokensDTO>();
					return Response<ILoginIF_v1.TokensDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<ILoginIF_v1.TokensDTO>.Failure( error );
				}
				else
				{
					return Response<ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_Login2FA'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<ILoginIF_v1.TokensDTO>> ILoginIF_v1.RefreshTokens(CallingContext ctx, string refreshToken)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/iam/identities/loginif/v1/refreshtokens/{refreshToken}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesLoginIF_v1", "RefreshTokens" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<ILoginIF_v1.TokensDTO>();
					return Response<ILoginIF_v1.TokensDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<ILoginIF_v1.TokensDTO>.Failure( error );
				}
				else
				{
					return Response<ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_RefreshTokens'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<string>> ILoginIF_v1.GetKAULoginURL(CallingContext ctx, string redirectUrl)
		{
			try
			{
				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/iam/identities/loginif/v1/getkauloginurl/{redirectUrl}" ) );
				ctx.FillHttpRequest( request, "IAMIdentitiesLoginIF_v1", "GetKAULoginURL" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<string>();
					return Response<string>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<string>.Failure( error );
				}
				else
				{
					return Response<string>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_GetKAULoginURL'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<string>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<string>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
