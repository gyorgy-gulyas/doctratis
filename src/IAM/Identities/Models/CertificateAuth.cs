
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>


namespace IAM.Identities.Identity
{
	/// Certificate-based authentication
	public partial class CertificateAuth : Auth, IEquatable<CertificateAuth>
	{
		/// csak KIADOTT cert után számolható
		public string certificateThumbprint { get; set; }
		public string serialNumber { get; set; }
		public string issuer { get; set; }
		public string subject { get; set; }
		/// SPKI hash - CSR-ből is képezhető
		public string publicKeyHash { get; set; }
		public DateTime validFrom { get; set; }
		public DateTime validUntil { get; set; }
		public bool isRevoked { get; set; }
		public string revocationReason { get; set; }
		public DateTime revokedAt { get; set; }

		#region Clone 
		public override CertificateAuth Clone()
		{
			CertificateAuth clone = new();

			// begin: Auth
			clone.method = method;
			clone.isActive = isActive;
			clone.accountId = new string(accountId.ToCharArray());
			// end: Auth

			// begin: BaseEntity
			// end: BaseEntity

			clone.certificateThumbprint = new string(certificateThumbprint.ToCharArray());
			clone.serialNumber = new string(serialNumber.ToCharArray());
			clone.issuer = new string(issuer.ToCharArray());
			clone.subject = new string(subject.ToCharArray());
			clone.publicKeyHash = new string(publicKeyHash.ToCharArray());
			clone.validFrom = validFrom;
			clone.validUntil = validUntil;
			clone.isRevoked = isRevoked;
			clone.revocationReason = new string(revocationReason.ToCharArray());
			clone.revokedAt = revokedAt;

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( CertificateAuth other )
		{
			if (other is null) return false;

			// begin: Auth
			if(method != other.method) return false;
			if(isActive != other.isActive) return false;
			if(accountId != other.accountId) return false;
			// end: Auth

			// begin: BaseEntity
			// end: BaseEntity

			if(certificateThumbprint != other.certificateThumbprint) return false;
			if(serialNumber != other.serialNumber) return false;
			if(issuer != other.issuer) return false;
			if(subject != other.subject) return false;
			if(publicKeyHash != other.publicKeyHash) return false;
			if(validFrom != other.validFrom) return false;
			if(validUntil != other.validUntil) return false;
			if(isRevoked != other.isRevoked) return false;
			if(revocationReason != other.revocationReason) return false;
			if(revokedAt != other.revokedAt) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as CertificateAuth);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Auth
			hash.Add(method);
			hash.Add(isActive);
			hash.Add(accountId);
			// end: Auth

			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			hash.Add(certificateThumbprint);
			hash.Add(serialNumber);
			hash.Add(issuer);
			hash.Add(subject);
			hash.Add(publicKeyHash);
			hash.Add(validFrom);
			hash.Add(validUntil);
			hash.Add(isRevoked);
			hash.Add(revocationReason);
			hash.Add(revokedAt);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
