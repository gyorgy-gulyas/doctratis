
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;

namespace IAM.Identities.Ldap
{
	public partial class LdapDomain : Core.Base.IBaseEntity, IEquatable<LdapDomain>
	{
		public partial class DomainController : IEquatable<DomainController>
		{
			/// Hostname or IP address of the DC
			public string host { get; set; }
			/// LDAP or LDAPS port (e.g. 389 or 636)
			public int port { get; set; }

			#region Clone 
			public virtual DomainController Clone()
			{
				DomainController clone = new();

				clone.host = new string(host.ToCharArray());
				clone.port = port;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( DomainController other )
			{
				if (other is null) return false;

				if(host != other.host) return false;
				if(port != other.port) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as DomainController);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(host);
				hash.Add(port);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

		#region IBaseEntity
		public string id { get; set; }
		public string etag { get; set; }
		public DateTime LastUpdate { get; set; }
		#endregion IBaseEntity

		/// Fully Qualified Domain Name (e.g. yourdomain.local)
		public string name { get; set; }
		/// Optional description or notes
		public string description { get; set; }
		/// NetBIOS name (e.g. YOURDOMAIN)
		public string netbiosName { get; set; }
		/// List of Domain Controller hostnames or IP addresses
		public List<LdapDomain.DomainController> domainControllers { get; set; } = new();
		/// Base Distinguished Name (where LDAP queries start, e.g. DC=yourdomain,DC=local)
		public string baseDn { get; set; }
		/// Whether to use secure LDAP (LDAPS)
		public bool useSecureLdap { get; set; }
		/// Service account username used for directory queries (if required)
		public string serviceAccountUser { get; set; }
		/// Service account password (should be stored securely/encrypted)
		public string serviceAccountPassword { get; set; }

		#region Clone 
		public virtual LdapDomain Clone()
		{
			LdapDomain clone = new();

			// begin: BaseEntity
			// end: BaseEntity

			clone.name = new string(name.ToCharArray());
			clone.description = new string(description.ToCharArray());
			clone.netbiosName = new string(netbiosName.ToCharArray());

			// clone of domainControllers
			clone.domainControllers.AddRange( domainControllers.Select( v => v.Clone() ));
			clone.baseDn = new string(baseDn.ToCharArray());
			clone.useSecureLdap = useSecureLdap;
			clone.serviceAccountUser = new string(serviceAccountUser.ToCharArray());
			clone.serviceAccountPassword = new string(serviceAccountPassword.ToCharArray());

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( LdapDomain other )
		{
			if (other is null) return false;

			// begin: BaseEntity
			// end: BaseEntity

			if(name != other.name) return false;
			if(description != other.description) return false;
			if(netbiosName != other.netbiosName) return false;

			// equals of domainControllers
			if(domainControllers.SequenceEqual(other.domainControllers) == false ) return false;
			if(baseDn != other.baseDn) return false;
			if(useSecureLdap != other.useSecureLdap) return false;
			if(serviceAccountUser != other.serviceAccountUser) return false;
			if(serviceAccountPassword != other.serviceAccountPassword) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as LdapDomain);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			hash.Add(name);
			hash.Add(description);
			hash.Add(netbiosName);

			// hash of domainControllers
			foreach( var element_domainControllers in domainControllers)
				hash.Add(element_domainControllers);
			hash.Add(baseDn);
			hash.Add(useSecureLdap);
			hash.Add(serviceAccountUser);
			hash.Add(serviceAccountPassword);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
