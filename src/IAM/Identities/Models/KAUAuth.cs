
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;

namespace IAM.Identities.Identity
{
	/// KAU Ügyfélkapu authentication
	public partial class KAUAuth : Auth, IEquatable<KAUAuth>
	{
		/// Government-issued unique identifier (Ügyfélkapu ID)
		public string KAUUserId { get; set; }
		/// User’s full legal name as returned by the service
		public string legalName { get; set; }
		/// Email address verified by the service (optional)
		public string email { get; set; }
		/// Optional two-factor authentication settings (TOTP, SMS, Email)
		public TwoFactorConfiguration twoFactor { get; set; }

		#region Clone 
		public override KAUAuth Clone()
		{
			KAUAuth clone = new();

			// begin: Auth
			clone.method = method;
			clone.accountId = new string(accountId.ToCharArray());
			// end: Auth

			// begin: BaseEntity
			// end: BaseEntity

			clone.KAUUserId = new string(KAUUserId.ToCharArray());
			clone.legalName = new string(legalName.ToCharArray());
			clone.email = new string(email.ToCharArray());

			// clone of twoFactor
			clone.twoFactor = twoFactor?.Clone();

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( KAUAuth other )
		{
			if (other is null) return false;

			// begin: Auth
			if(method != other.method) return false;
			if(accountId != other.accountId) return false;
			// end: Auth

			// begin: BaseEntity
			// end: BaseEntity

			if(KAUUserId != other.KAUUserId) return false;
			if(legalName != other.legalName) return false;
			if(email != other.email) return false;

			// equals of twoFactor
			if(twoFactor == null && other.twoFactor != null ) return false;
			if(twoFactor != null && twoFactor.Equals(other.twoFactor) == false ) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as KAUAuth);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Auth
			hash.Add(method);
			hash.Add(accountId);
			// end: Auth

			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			hash.Add(KAUUserId);
			hash.Add(legalName);
			hash.Add(email);

			// hash of twoFactor
			if(twoFactor != null ) hash.Add(twoFactor);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
