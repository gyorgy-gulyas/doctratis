
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using ServiceKit.Net;

namespace IAM.Identities
{
	public partial interface ILoginService
	{
		/// <return>ILoginIF_v1.LoginResultDTO</return>
		public Task<Response<ILoginIF_v1.LoginResultDTO>> LoginWithEmailPassword(CallingContext ctx, string email, string password);

		/// <return>ILoginIF_v1.LoginResultDTO</return>
		public Task<Response<ILoginIF_v1.LoginResultDTO>> LoginWithAD(CallingContext ctx, string username, string password);

		/// <return>ILoginIF_v1.TokensDTO</return>
		public Task<Response<ILoginIF_v1.TokensDTO>> Login2FA(CallingContext ctx, string code);

		/// <return>ILoginIF_v1.TokensDTO</return>
		public Task<Response<ILoginIF_v1.TokensDTO>> RefreshTokens(CallingContext ctx, string totp);

		/// <return>string</return>
		public Task<Response<string>> GetKAULoginURL(CallingContext ctx, string redirectUrl, string backendCallbackUrl);

		/// <return>ILoginService.KAUCallbackResponse</return>
		public Task<Response<ILoginService.KAUCallbackResponse>> KAUCallback(CallingContext ctx, string code, string state);

		public Task<Response> ChangePassword(CallingContext ctx, string email, string oldPassword, string newPassword);

		public Task<Response> ForgotPassword(CallingContext ctx, string email);

		public Task<Response> ResetPassword(CallingContext ctx, string email, string token, string newPassword);

		public Task<Response> ConfirmEmail(CallingContext ctx, string email, string token);


		public partial class KAUCallbackResponse : IEquatable<KAUCallbackResponse>
		{
			public string returnUrl { get; set; }
			public ILoginIF_v1.LoginResultDTO result { get; set; }

			#region Clone 
			public virtual KAUCallbackResponse Clone()
			{
				KAUCallbackResponse clone = new();

				clone.returnUrl = new string(returnUrl.ToCharArray());

				// clone of result
				clone.result = result?.Clone();

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( KAUCallbackResponse other )
			{
				if (other is null) return false;

				if(returnUrl != other.returnUrl) return false;

				// equals of result
				if(result == null && other.result != null ) return false;
				if(result != null && result.Equals(other.result) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as KAUCallbackResponse);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(returnUrl);

				// hash of result
				if(result != null ) hash.Add(result);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

	}
}
