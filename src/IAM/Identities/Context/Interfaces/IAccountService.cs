
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using ServiceKit.Net;

namespace IAM.Identities
{
	public partial interface IAccountService
	{
		/// <summary>
		///  Finds a user account by email address
		/// </summary>
		/// <return>IAccountService.AccountWithAuth</return>
		public Task<Response<IAccountService.AccountWithAuth>> findAccountByEmailAuth(CallingContext ctx, string email);

		/// <summary>
		///  Finds a user account by email address
		/// </summary>
		/// <return>IAccountService.AccountWithAuth</return>
		public Task<Response<IAccountService.AccountWithAuth>> findAccountByADCredentrials(CallingContext ctx, Ldap.LdapDomain ldapDomain, string username);

		/// <summary>
		///  Finds a user account by KAU id
		/// </summary>
		/// <return>IAccountService.AccountWithAuth</return>
		public Task<Response<IAccountService.AccountWithAuth>> findAccountKAUUserId(CallingContext ctx, string kauUserId);

		/// <return>Identity.Account</return>
		public Task<Response<Identity.Account>> createAccount(CallingContext ctx, AccountData data);

		/// <return>Identity.Account</return>
		public Task<Response<Identity.Account>> updateAccount(CallingContext ctx, string accountId, string etag, AccountData data);


		public partial class AccountWithAuth : IEquatable<AccountWithAuth>
		{
			public Identity.Account account { get; set; }
			public Identity.Auth auth { get; set; }

			#region Clone 
			public virtual AccountWithAuth Clone()
			{
				AccountWithAuth clone = new();


				// clone of account
				clone.account = account?.Clone();

				// clone of auth
				clone.auth = auth?.Clone();

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountWithAuth other )
			{
				if (other is null) return false;


				// equals of account
				if(account == null && other.account != null ) return false;
				if(account != null && account.Equals(other.account) == false ) return false;

				// equals of auth
				if(auth == null && other.auth != null ) return false;
				if(auth != null && auth.Equals(other.auth) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountWithAuth);

			public override int GetHashCode()
			{
				var hash = new HashCode();

				// hash of account
				if(account != null ) hash.Add(account);

				// hash of auth
				if(auth != null ) hash.Add(auth);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

		public partial class AccountData : IEquatable<AccountData>
		{
			public Identity.Account.Types Type { get; set; }
			public string Name { get; set; }
			public bool isActive { get; set; }
			public List<Identity.ContactInfo> contacts { get; set; } = new();

			#region Clone 
			public virtual AccountData Clone()
			{
				AccountData clone = new();

				clone.Type = Type;
				clone.Name = new string(Name.ToCharArray());
				clone.isActive = isActive;

				// clone of contacts
				clone.contacts.AddRange( contacts.Select( v => v.Clone() ));

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountData other )
			{
				if (other is null) return false;

				if(Type != other.Type) return false;
				if(Name != other.Name) return false;
				if(isActive != other.isActive) return false;

				// equals of contacts
				if(contacts.SequenceEqual(other.contacts) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountData);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(Type);
				hash.Add(Name);
				hash.Add(isActive);

				// hash of contacts
				foreach( var element_contacts in contacts)
					hash.Add(element_contacts);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

	}
}
