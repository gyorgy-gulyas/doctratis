
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using ServiceKit.Net;

namespace IAM.Identities
{
	public partial interface IAccountAuthService
	{
		/// <return>Identity.Auth</return>
		public Task<Response<Identity.Auth>> setAuthActive(CallingContext ctx, string accountId, string authId, string etag, bool isActive);

		/// <return>Identity.EmailAuth</return>
		public Task<Response<Identity.EmailAuth>> createEmailAuth(CallingContext ctx, string accountId, string email, string password, bool enableTwoFactor, Identity.TwoFactorConfiguration.Methods twoFactorMethod, string twoFactorPhoneNumber, string twoFactorEmail);

		/// <return>Identity.EmailAuth</return>
		public Task<Response<Identity.EmailAuth>> changePassword(CallingContext ctx, string accountId, string authId, string etag, string newPassword, DateOnly passwordExpiresAt);

		/// <return>Identity.EmailAuth</return>
		public Task<Response<Identity.EmailAuth>> setEmailTwoFactor(CallingContext ctx, string accountId, string authId, string etag, bool enabled, Identity.TwoFactorConfiguration.Methods method, string phoneNumber, string email);

		/// <return>bool</return>
		public Task<Response<bool>> confirmEmail(CallingContext ctx, string confirmationToken);

		/// <return>Identity.ADAuth</return>
		public Task<Response<Identity.ADAuth>> CreateADAuth(CallingContext ctx, string accountId, string ldapDomainId, string userName, bool enableTwoFactor, Identity.TwoFactorConfiguration.Methods twoFactorMethod, string twoFactorPhoneNumber, string twoFactorEmail);

		/// <return>Identity.ADAuth</return>
		public Task<Response<Identity.ADAuth>> UpdateADAccount(CallingContext ctx, string accountId, string authId, string etag, string ldapDomainId, string userName);

		/// <return>Identity.ADAuth</return>
		public Task<Response<Identity.ADAuth>> SetADTwoFactor(CallingContext ctx, string accountId, string authId, string etag, bool enabled, string method, string phoneNumber, string email);

		/// <return>Identity.KAUAuth</return>
		public Task<Response<Identity.KAUAuth>> CreateKAUAuth(CallingContext ctx, string accountId, string kauUserId, bool enableTwoFactor, Identity.TwoFactorConfiguration.Methods twoFactorMethod, string twoFactorPhoneNumber, string twoFactorEmail);

		/// <return>Identity.KAUAuth</return>
		public Task<Response<Identity.KAUAuth>> UpdateKAUProfile(CallingContext ctx, string accountId, string authId, string etag, string legalName, string email);

		/// <return>Identity.KAUAuth</return>
		public Task<Response<Identity.KAUAuth>> SetKAUTwoFactor(CallingContext ctx, string accountId, string authId, string etag, bool enabled, string method, string phoneNumber, string email);

		/// <return>Identity.CertificateAuth</return>
		public Task<Response<Identity.CertificateAuth>> CreateCertificateFromCSR(CallingContext ctx, string accountId, string csrPem, string profile);

		/// <return>Identity.CertificateAuth</return>
		public Task<Response<Identity.CertificateAuth>> RevokeCertificate(CallingContext ctx, string accountId, string authId, string etag, string reason);


	}
}
