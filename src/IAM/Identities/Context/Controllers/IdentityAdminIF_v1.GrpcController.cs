
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using IAM.Identities;
using IAM.Identities.Protos.IdentityAdminIF_v1;
using Microsoft.Extensions.Logging;
using Serilog.Context;
using ServiceKit.Net;

namespace IAM.Identities
{
	public class IdentityAdminIF_v1_GrpcController : IAM.Identities.Protos.IdentityAdminIF_v1.IdentityAdminIF_v1.IdentityAdminIF_v1Base 
	{
		private readonly ILogger<IdentityAdminIF_v1_GrpcController> _logger;
		private readonly IIdentityAdminIF_v1 _service;

		public IdentityAdminIF_v1_GrpcController( ILogger<IdentityAdminIF_v1_GrpcController> logger, IIdentityAdminIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public override async Task<IdentityAdminIF_v1_RegisterLdapDomainResponse> RegisterLdapDomain( IdentityAdminIF_v1_RegisterLdapDomainRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.RegisterLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					IIdentityAdminIF_v1.LdapDomainDTO ldap;
					ldap = request.Ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( request.Ldap ) : null;

					// calling the service function itself
					var response = await _service.RegisterLdapDomain( ctx , ldap );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_RegisterLdapDomainResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_RegisterLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.RegisterLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_RegisterLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_RegisterLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse> GetAllRegisteredLdapDomain( Empty request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.GetAllRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{

					// calling the service function itself
					var response = await _service.GetAllRegisteredLdapDomain( ctx  );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse();
							result.Value.Value.AddRange( response.Value.Select( v => IIdentityAdminIF_v1.LdapDomainSummaryDTO.ToGrpc( v ) ));
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.GetAllRegisteredLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_GetRegisteredLdapDomainResponse> GetRegisteredLdapDomain( IdentityAdminIF_v1_GetRegisteredLdapDomainRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.GetRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string id;
					id = request.Id;

					// calling the service function itself
					var response = await _service.GetRegisteredLdapDomain( ctx , id );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.GetRegisteredLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse> UpdateRegisteredLdapDomain( IdentityAdminIF_v1_UpdateRegisteredLdapDomainRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.UpdateRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					IIdentityAdminIF_v1.LdapDomainDTO ldap;
					ldap = request.Ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( request.Ldap ) : null;

					// calling the service function itself
					var response = await _service.UpdateRegisteredLdapDomain( ctx , ldap );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.UpdateRegisteredLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getAllAccountResponse> getAllAccount( Empty request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getAllAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{

					// calling the service function itself
					var response = await _service.getAllAccount( ctx  );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getAllAccountResponse();
							result.Value.Value.AddRange( response.Value.Select( v => IIdentityAdminIF_v1.AccountSummaryDTO.ToGrpc( v ) ));
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getAllAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getAllAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getAllAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getAllAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getAccountResponse> getAccount( IdentityAdminIF_v1_getAccountRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string id;
					id = request.Id;

					// calling the service function itself
					var response = await _service.getAccount( ctx , id );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getAccountResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.AccountDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_createAccountResponse> createAccount( IdentityAdminIF_v1_createAccountRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string username;
					username = request.Username;
					IIdentityAdminIF_v1.AccountTypes accountType;
					accountType = IIdentityAdminIF_v1.AccountTypesMappings.FromGrpc( request.AccountType) ;

					// calling the service function itself
					var response = await _service.createAccount( ctx , username, accountType );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_createAccountResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.AccountDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_createAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.createAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_createAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_createAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_updateAccountResponse> updateAccount( IdentityAdminIF_v1_updateAccountRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.updateAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string etag;
					etag = request.Etag;
					IIdentityAdminIF_v1.AccountDataDTO data;
					data = request.Data != null ? IIdentityAdminIF_v1.AccountDataDTO.FromGrpc( request.Data ) : null;

					// calling the service function itself
					var response = await _service.updateAccount( ctx , accountId, etag, data );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_updateAccountResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.AccountDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_updateAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.updateAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_updateAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_updateAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_listAuthsForAccountResponse> listAuthsForAccount( IdentityAdminIF_v1_listAuthsForAccountRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.listAuthsForAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;

					// calling the service function itself
					var response = await _service.listAuthsForAccount( ctx , accountId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_listAuthsForAccountResponse();
							result.Value.Value.AddRange( response.Value.Select( v => IIdentityAdminIF_v1.AuthDTO.ToGrpc( v ) ));
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_listAuthsForAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.listAuthsForAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_listAuthsForAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_listAuthsForAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_setActiveForAuthResponse> setActiveForAuth( IdentityAdminIF_v1_setActiveForAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setActiveForAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;
					bool isActive;
					isActive = request.IsActive;

					// calling the service function itself
					var response = await _service.setActiveForAuth( ctx , accountId, authId, isActive );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_setActiveForAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.AuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_setActiveForAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.setActiveForAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_setActiveForAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_setActiveForAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_createtEmailAuthResponse> createtEmailAuth( IdentityAdminIF_v1_createtEmailAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createtEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string email;
					email = request.Email;
					string initialPassword;
					initialPassword = request.InitialPassword;
					IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor;
					twoFactor = request.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( request.TwoFactor ) : null;

					// calling the service function itself
					var response = await _service.createtEmailAuth( ctx , accountId, email, initialPassword, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_createtEmailAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_createtEmailAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.createtEmailAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_createtEmailAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_createtEmailAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getEmailAuthResponse> getEmailAuth( IdentityAdminIF_v1_getEmailAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;

					// calling the service function itself
					var response = await _service.getEmailAuth( ctx , accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getEmailAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getEmailAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getEmailAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getEmailAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getEmailAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_changePasswordOnEmailAuthResponse> changePasswordOnEmailAuth( IdentityAdminIF_v1_changePasswordOnEmailAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.changePasswordOnEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;
					string etag;
					etag = request.Etag;
					string newPassword;
					newPassword = request.NewPassword;

					// calling the service function itself
					var response = await _service.changePasswordOnEmailAuth( ctx , accountId, authId, etag, newPassword );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_changePasswordOnEmailAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_changePasswordOnEmailAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.changePasswordOnEmailAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_changePasswordOnEmailAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_changePasswordOnEmailAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse> setTwoFactorOnEmailAuth( IdentityAdminIF_v1_setTwoFactorOnEmailAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setTwoFactorOnEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;
					string etag;
					etag = request.Etag;
					IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor;
					twoFactor = request.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( request.TwoFactor ) : null;

					// calling the service function itself
					var response = await _service.setTwoFactorOnEmailAuth( ctx , accountId, authId, etag, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.EmailAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.setTwoFactorOnEmailAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_setTwoFactorOnEmailAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_confirmEmailResponse> confirmEmail( IdentityAdminIF_v1_confirmEmailRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.confirmEmail" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string token;
					token = request.Token;

					// calling the service function itself
					var response = await _service.confirmEmail( ctx , token );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_confirmEmailResponse();
							result.Value = response.Value;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_confirmEmailResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.confirmEmail'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_confirmEmailResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_confirmEmailResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_createADAuthResponse> createADAuth( IdentityAdminIF_v1_createADAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createADAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string ldapDomainId;
					ldapDomainId = request.LdapDomainId;
					string adUsername;
					adUsername = request.AdUsername;
					IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor;
					twoFactor = request.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( request.TwoFactor ) : null;

					// calling the service function itself
					var response = await _service.createADAuth( ctx , accountId, ldapDomainId, adUsername, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_createADAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.ADAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_createADAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.createADAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_createADAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_createADAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getADAuthResponse> getADAuth( IdentityAdminIF_v1_getADAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getADAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;

					// calling the service function itself
					var response = await _service.getADAuth( ctx , accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getADAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.ADAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getADAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getADAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getADAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getADAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_setTwoFactorOnADAuthResponse> setTwoFactorOnADAuth( IdentityAdminIF_v1_setTwoFactorOnADAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setTwoFactorOnADAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;
					string etag;
					etag = request.Etag;
					IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor;
					twoFactor = request.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( request.TwoFactor ) : null;

					// calling the service function itself
					var response = await _service.setTwoFactorOnADAuth( ctx , accountId, authId, etag, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_setTwoFactorOnADAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.ADAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_setTwoFactorOnADAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.setTwoFactorOnADAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_setTwoFactorOnADAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_setTwoFactorOnADAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_createKAUAuthResponse> createKAUAuth( IdentityAdminIF_v1_createKAUAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createKAUAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string kauUserId;
					kauUserId = request.KauUserId;
					IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor;
					twoFactor = request.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( request.TwoFactor ) : null;

					// calling the service function itself
					var response = await _service.createKAUAuth( ctx , accountId, kauUserId, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_createKAUAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.KAUAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_createKAUAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.createKAUAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_createKAUAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_createKAUAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getKAUAuthResponse> getKAUAuth( IdentityAdminIF_v1_getKAUAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getKAUAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;

					// calling the service function itself
					var response = await _service.getKAUAuth( ctx , accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getKAUAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.KAUAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getKAUAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getKAUAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getKAUAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getKAUAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse> setTwoFactorOnKAUAuth( IdentityAdminIF_v1_setTwoFactorOnKAUAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setTwoFactorOnKAUAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;
					string etag;
					etag = request.Etag;
					IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor;
					twoFactor = request.TwoFactor != null ? IIdentityAdminIF_v1.TwoFactorConfigurationDTO.FromGrpc( request.TwoFactor ) : null;

					// calling the service function itself
					var response = await _service.setTwoFactorOnKAUAuth( ctx , accountId, authId, etag, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.KAUAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.setTwoFactorOnKAUAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_setTwoFactorOnKAUAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_createCertificateAuthFromCSRResponse> createCertificateAuthFromCSR( IdentityAdminIF_v1_createCertificateAuthFromCSRRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createCertificateAuthFromCSR" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					IIdentityAdminIF_v1.CsrInputDTO data;
					data = request.Data != null ? IIdentityAdminIF_v1.CsrInputDTO.FromGrpc( request.Data ) : null;

					// calling the service function itself
					var response = await _service.createCertificateAuthFromCSR( ctx , accountId, data );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_createCertificateAuthFromCSRResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.CertificateAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_createCertificateAuthFromCSRResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.createCertificateAuthFromCSR'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_createCertificateAuthFromCSRResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_createCertificateAuthFromCSRResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_revokeCertificateResponse> revokeCertificate( IdentityAdminIF_v1_revokeCertificateRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.revokeCertificate" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;
					string etag;
					etag = request.Etag;
					string reason;
					reason = request.Reason;

					// calling the service function itself
					var response = await _service.revokeCertificate( ctx , accountId, authId, etag, reason );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_revokeCertificateResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.CertificateAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_revokeCertificateResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.revokeCertificate'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_revokeCertificateResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_revokeCertificateResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getCertificateAuthResponse> getCertificateAuth( IdentityAdminIF_v1_getCertificateAuthRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getCertificateAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string accountId;
					accountId = request.AccountId;
					string authId;
					authId = request.AuthId;

					// calling the service function itself
					var response = await _service.getCertificateAuth( ctx , accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getCertificateAuthResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.CertificateAuthDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getCertificateAuthResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getCertificateAuth'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getCertificateAuthResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getCertificateAuthResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
