
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using Microsoft.Extensions.Logging;
using Serilog.Context;
using ServiceKit.Net;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.Swagger;
using System.Net.Mime;

namespace IAM.Identities
{
	[ApiController]
	[Route( "iam/identities/loginif/v1" )]
	public class LoginIF_v1_RestController : ControllerBase 
	{
		private readonly ILogger<LoginIF_v1_RestController> _logger;
		private readonly ILoginIF_v1 _service;
		public LoginIF_v1_RestController( ILogger<LoginIF_v1_RestController> logger, ILoginIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		/// Login using email and password credentials
		[HttpPost( "loginwithemailpassword/{email}/{password}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "Login using email and password credentials" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.LoginResultDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> LoginWithEmailPassword( [FromRoute] string email,  [FromRoute] string password)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithEmailPassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.LoginWithEmailPassword( ctx, email, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.LoginWithEmailPassword'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		/// Complete login with Active Directory
		[HttpPost( "loginwithad/{username}/{password}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "Complete login with Active Directory" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.LoginResultDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> LoginWithAD( [FromRoute] string username,  [FromRoute] string password)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithAD" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.LoginWithAD( ctx, username, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.LoginWithAD'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		/// Complete login with two-factor authentication (TOTP)
		[HttpPost( "login2fa/{code}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "Complete login with two-factor authentication (TOTP)" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.TokensDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> Login2FA( [FromRoute] string code)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.Login2FA" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.Login2FA( ctx, code );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.Login2FA'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		/// refresh bearer tokens
		[HttpPost( "refreshtokens/{refreshToken}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "refresh bearer tokens" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.TokensDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> RefreshTokens( [FromRoute] string refreshToken)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.RefreshTokens" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.RefreshTokens( ctx, refreshToken );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.RefreshTokens'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		/// getting the KAU url, expects the frontend url, where the frontend must be redirected
		/// the redirect url format is: {redirectUrl}/?accessToken={string}&refreshToken={string&requires2FA={boolean}&accessTokenExpiresAt={string}&refreshTokenExpiresAt={string}
		/// Generates the KAÃœ login URL with a signed state containing the frontend returnUrl.
		/// Flow:
		/// 1. Browser calls this endpoint (GetKAULoginUrl) and passes the desired frontend returnUrl.
		/// 2. Backend builds the KAÃœ authorize URL with its own callback URL and the signed state.
		/// 3. Browser is redirected to KAÃœ login page.
		/// 4. KAÃœ authenticates the user and redirects the browser to the backend callback URL with code + state.
		/// 5. Backend exchanges the code for tokens and finally redirects the browser to the original frontend returnUrl.
		/// Note: For local development KAÃœ must be able to call the backend callback URL (use ngrok/dev tunnel).
		/// returns: the KAU url, where the browser must be redirected.
		[HttpGet( "getkauloginurl/{redirectUrl}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "getting the KAU url, expects the frontend url, where the frontend must be redirected the redirect url format is: {redirectUrl}/?accessToken={string}&refreshToken={string&requires2FA={boolean}&accessTokenExpiresAt={string}&refreshTokenExpiresAt={string} Generates the KAÃœ login URL with a signed state containing the frontend returnUrl. Flow: 1. Browser calls this endpoint (GetKAULoginUrl) and passes the desired frontend returnUrl. 2. Backend builds the KAÃœ authorize URL with its own callback URL and the signed state. 3. Browser is redirected to KAÃœ login page. 4. KAÃœ authenticates the user and redirects the browser to the backend callback URL with code + state. 5. Backend exchanges the code for tokens and finally redirects the browser to the original frontend returnUrl. Note: For local development KAÃœ must be able to call the backend callback URL (use ngrok/dev tunnel). returns: the KAU url, where the browser must be redirected." )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(string) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> GetKAULoginURL( [FromRoute] string redirectUrl)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.GetKAULoginURL" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.GetKAULoginURL( ctx, redirectUrl );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.GetKAULoginURL'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
