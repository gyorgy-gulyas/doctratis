
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using IAM.Identities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using Microsoft.Extensions.Logging;
using Serilog.Context;
using ServiceKit.Net;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.Swagger;
using System.Net.Mime;

namespace IAM.Identities
{
	[ApiController]
	[Route( "iam/identities/identityadminif/v1" )]
	public class IdentityAdminIF_v1_RestController : ControllerBase 
	{
		private readonly ILogger<IdentityAdminIF_v1_RestController> _logger;
		private readonly IIdentityAdminIF_v1 _service;
		public IdentityAdminIF_v1_RestController( ILogger<IdentityAdminIF_v1_RestController> logger, IIdentityAdminIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		[HttpPost( "registerldapdomain" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.LdapDomainDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> RegisterLdapDomain( [FromBody] IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.RegisterLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.RegisterLdapDomain( ctx, ldap );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.RegisterLdapDomain'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "updateregisteredldapdomain" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.LdapDomainDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> UpdateRegisteredLdapDomain( [FromBody] IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.UpdateRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.UpdateRegisteredLdapDomain( ctx, ldap );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.UpdateRegisteredLdapDomain'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpGet( "getallregisteredldapdomain" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> GetAllRegisteredLdapDomain()
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.GetAllRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.GetAllRegisteredLdapDomain( ctx );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.GetAllRegisteredLdapDomain'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpGet( "getregisteredldapdomain/{id}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.LdapDomainDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> GetRegisteredLdapDomain( [FromRoute] string id)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.GetRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.GetRegisteredLdapDomain( ctx, id );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.GetRegisteredLdapDomain'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "getallaccount" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(List<IIdentityAdminIF_v1.AccountSummaryDTO>) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getAllAccount()
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getAllAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getAllAccount( ctx );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.getAllAccount'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "getaccount/{id}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.AccountDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getAccount( [FromRoute] string id)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getAccount( ctx, id );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.getAccount'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "createaccount/{username}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.AccountDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> createAccount( [FromRoute] string username,  [FromQuery] string _str_accountType)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					IIdentityAdminIF_v1.AccountTypes accountType = (IIdentityAdminIF_v1.AccountTypes)Enum.Parse(typeof(IIdentityAdminIF_v1.AccountTypes), _str_accountType);
					// calling the service function itself
					var response = await _service.createAccount( ctx, username, accountType );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.createAccount'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "updateaccount/{accountId}/{etag}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.AccountDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> updateAccount( [FromRoute] string accountId,  [FromRoute] string etag,  [FromBody] IIdentityAdminIF_v1.AccountDataDTO data)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.updateAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.updateAccount( ctx, accountId, etag, data );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.updateAccount'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "listauthsforaccount/{accountId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(List<IIdentityAdminIF_v1.AuthDTO>) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> listAuthsForAccount( [FromRoute] string accountId)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.listAuthsForAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.listAuthsForAccount( ctx, accountId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.listAuthsForAccount'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "setactiveforauth/{accountId}/{authId}/{etag}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.AuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> setActiveForAuth( [FromRoute] string accountId,  [FromRoute] string authId,  [FromRoute] string etag,  [FromQuery] bool isActive)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setActiveForAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.setActiveForAuth( ctx, accountId, authId, etag, isActive );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.setActiveForAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "createtemailauth/{accountId}/{email}/{initialPassword}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.EmailAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> createtEmailAuth( [FromRoute] string accountId,  [FromRoute] string email,  [FromRoute] string initialPassword,  [FromBody] IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createtEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.createtEmailAuth( ctx, accountId, email, initialPassword, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.createtEmailAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "getemailauth/{accountId}/{authId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.EmailAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getEmailAuth( [FromRoute] string accountId,  [FromRoute] string authId)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getEmailAuth( ctx, accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.getEmailAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "changepasswordonemailauth/{accountId}/{authId}/{etag}/{newPassword}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.EmailAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> changePasswordOnEmailAuth( [FromRoute] string accountId,  [FromRoute] string authId,  [FromRoute] string etag,  [FromRoute] string newPassword)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.changePasswordOnEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.changePasswordOnEmailAuth( ctx, accountId, authId, etag, newPassword );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.changePasswordOnEmailAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "settwofactoronemailauth/{accountId}/{authId}/{etag}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.EmailAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> setTwoFactorOnEmailAuth( [FromRoute] string accountId,  [FromRoute] string authId,  [FromRoute] string etag,  [FromBody] IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setTwoFactorOnEmailAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.setTwoFactorOnEmailAuth( ctx, accountId, authId, etag, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.setTwoFactorOnEmailAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "confirmemail/{token}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(bool) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> confirmEmail( [FromRoute] string token)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.confirmEmail" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.confirmEmail( ctx, token );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.confirmEmail'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "createadauth/{accountId}/{ldapDomainId}/{adUsername}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.ADAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> createADAuth( [FromRoute] string accountId,  [FromRoute] string ldapDomainId,  [FromRoute] string adUsername,  [FromBody] IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createADAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.createADAuth( ctx, accountId, ldapDomainId, adUsername, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.createADAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "getadauth/{accountId}/{authId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.ADAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getADAuth( [FromRoute] string accountId,  [FromRoute] string authId)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getADAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getADAuth( ctx, accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.getADAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "settwofactoronadauth/{accountId}/{authId}/{etag}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.ADAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> setTwoFactorOnADAuth( [FromRoute] string accountId,  [FromRoute] string authId,  [FromRoute] string etag,  [FromBody] IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setTwoFactorOnADAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.setTwoFactorOnADAuth( ctx, accountId, authId, etag, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.setTwoFactorOnADAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "createkauauth/{accountId}/{kauUserId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.KAUAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> createKAUAuth( [FromRoute] string accountId,  [FromRoute] string kauUserId,  [FromBody] IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createKAUAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.createKAUAuth( ctx, accountId, kauUserId, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.createKAUAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "getkauauth/{accountId}/{authId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.KAUAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getKAUAuth( [FromRoute] string accountId,  [FromRoute] string authId)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getKAUAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getKAUAuth( ctx, accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.getKAUAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "settwofactoronkauauth/{accountId}/{authId}/{etag}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.KAUAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> setTwoFactorOnKAUAuth( [FromRoute] string accountId,  [FromRoute] string authId,  [FromRoute] string etag,  [FromBody] IIdentityAdminIF_v1.TwoFactorConfigurationDTO twoFactor)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.setTwoFactorOnKAUAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.setTwoFactorOnKAUAuth( ctx, accountId, authId, etag, twoFactor );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.setTwoFactorOnKAUAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "createcertificateauthfromcsr/{accountId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.CertificateAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> createCertificateAuthFromCSR( [FromRoute] string accountId,  [FromBody] IIdentityAdminIF_v1.CsrInputDTO data)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.createCertificateAuthFromCSR" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.createCertificateAuthFromCSR( ctx, accountId, data );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.createCertificateAuthFromCSR'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "revokecertificate/{accountId}/{authId}/{etag}/{reason}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.CertificateAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> revokeCertificate( [FromRoute] string accountId,  [FromRoute] string authId,  [FromRoute] string etag,  [FromRoute] string reason)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.revokeCertificate" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.revokeCertificate( ctx, accountId, authId, etag, reason );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.revokeCertificate'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "getcertificateauth/{accountId}/{authId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IIdentityAdminIF_v1.CertificateAuthDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getCertificateAuth( [FromRoute] string accountId,  [FromRoute] string authId)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getCertificateAuth" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getCertificateAuth( ctx, accountId, authId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'IdentityAdminIF_v1.getCertificateAuth'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
