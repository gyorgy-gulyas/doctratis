
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using IAM.Identities.Protos.LoginIF_v1;
using Microsoft.Extensions.Logging;
using Serilog.Context;
using ServiceKit.Net;

namespace IAM.Identities
{
	public class LoginIF_v1_GrpcController : IAM.Identities.Protos.LoginIF_v1.LoginIF_v1.LoginIF_v1Base 
	{
		private readonly ILogger<LoginIF_v1_GrpcController> _logger;
		private readonly ILoginIF_v1 _service;

		public LoginIF_v1_GrpcController( ILogger<LoginIF_v1_GrpcController> logger, ILoginIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public override async Task<LoginIF_v1_LoginWithEmailPasswordResponse> LoginWithEmailPassword( LoginIF_v1_LoginWithEmailPasswordRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithEmailPassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string email;
					email = request.Email;
					string password;
					password = request.Password;

					// calling the service function itself
					var response = await _service.LoginWithEmailPassword( ctx , email, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_LoginWithEmailPasswordResponse();
							result.Value = response.Value != null ? ILoginIF_v1.LoginResultDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new LoginIF_v1_LoginWithEmailPasswordResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.LoginWithEmailPassword'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_LoginWithEmailPasswordResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_LoginWithEmailPasswordResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_ConfirmEmailResponse> ConfirmEmail( LoginIF_v1_ConfirmEmailRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.ConfirmEmail" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string email;
					email = request.Email;
					string token;
					token = request.Token;

					// calling the service function itself
					var response = await _service.ConfirmEmail( ctx , email, token );

					if( response.IsSuccess() == true )
					{
						return new LoginIF_v1_ConfirmEmailResponse {
							Success = new Empty()
						};
					}
					else
					{
						return new LoginIF_v1_ConfirmEmailResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
					
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_ConfirmEmailResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_ChangePasswordResponse> ChangePassword( LoginIF_v1_ChangePasswordRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.ChangePassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string email;
					email = request.Email;
					string oldPassword;
					oldPassword = request.OldPassword;
					string newPassword;
					newPassword = request.NewPassword;

					// calling the service function itself
					var response = await _service.ChangePassword( ctx , email, oldPassword, newPassword );

					if( response.IsSuccess() == true )
					{
						return new LoginIF_v1_ChangePasswordResponse {
							Success = new Empty()
						};
					}
					else
					{
						return new LoginIF_v1_ChangePasswordResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
					
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_ChangePasswordResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_ForgotPasswordResponse> ForgotPassword( LoginIF_v1_ForgotPasswordRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.ForgotPassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string email;
					email = request.Email;

					// calling the service function itself
					var response = await _service.ForgotPassword( ctx , email );

					if( response.IsSuccess() == true )
					{
						return new LoginIF_v1_ForgotPasswordResponse {
							Success = new Empty()
						};
					}
					else
					{
						return new LoginIF_v1_ForgotPasswordResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
					
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_ForgotPasswordResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_ResetPasswordResponse> ResetPassword( LoginIF_v1_ResetPasswordRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.ResetPassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string email;
					email = request.Email;
					string token;
					token = request.Token;
					string newPassword;
					newPassword = request.NewPassword;

					// calling the service function itself
					var response = await _service.ResetPassword( ctx , email, token, newPassword );

					if( response.IsSuccess() == true )
					{
						return new LoginIF_v1_ResetPasswordResponse {
							Success = new Empty()
						};
					}
					else
					{
						return new LoginIF_v1_ResetPasswordResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
					
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_ResetPasswordResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_LoginWithADResponse> LoginWithAD( LoginIF_v1_LoginWithADRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithAD" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string username;
					username = request.Username;
					string password;
					password = request.Password;

					// calling the service function itself
					var response = await _service.LoginWithAD( ctx , username, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_LoginWithADResponse();
							result.Value = response.Value != null ? ILoginIF_v1.LoginResultDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new LoginIF_v1_LoginWithADResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.LoginWithAD'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_LoginWithADResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_LoginWithADResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_Login2FAResponse> Login2FA( LoginIF_v1_Login2FARequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.Login2FA" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string code;
					code = request.Code;

					// calling the service function itself
					var response = await _service.Login2FA( ctx , code );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_Login2FAResponse();
							result.Value = response.Value != null ? ILoginIF_v1.TokensDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new LoginIF_v1_Login2FAResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.Login2FA'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_Login2FAResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_Login2FAResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_RefreshTokensResponse> RefreshTokens( LoginIF_v1_RefreshTokensRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.RefreshTokens" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string refreshToken;
					refreshToken = request.RefreshToken;

					// calling the service function itself
					var response = await _service.RefreshTokens( ctx , refreshToken );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_RefreshTokensResponse();
							result.Value = response.Value != null ? ILoginIF_v1.TokensDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new LoginIF_v1_RefreshTokensResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.RefreshTokens'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_RefreshTokensResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_RefreshTokensResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_GetKAULoginURLResponse> GetKAULoginURL( LoginIF_v1_GetKAULoginURLRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.GetKAULoginURL" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string redirectUrl;
					redirectUrl = request.RedirectUrl;

					// calling the service function itself
					var response = await _service.GetKAULoginURL( ctx , redirectUrl );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_GetKAULoginURLResponse();
							result.Value = response.Value;
							return result;
						}
						else
						{
							return new LoginIF_v1_GetKAULoginURLResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.GetKAULoginURL'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_GetKAULoginURLResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_GetKAULoginURLResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
