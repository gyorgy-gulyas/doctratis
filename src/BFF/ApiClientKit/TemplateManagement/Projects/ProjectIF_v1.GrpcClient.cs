
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using ServiceKit.Net;
using TemplateManagement.Projects;
using TemplateManagement.Projects.Protos.ProjectIF_v1;

namespace BFF.ApiClientKit
{
	static class Grpc 
	{
		static class ProjectIF
		{
			static class V1 
			{
				private static ProjectIF_v1.ProjectIF_v1Client _client;
				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>> createProject(string name, string description, string createdBy)
				{
					try
					{
						// fill grpc request
						var request = new ProjectIF_v1_createProjectRequest();
						request.Name = name;
						request.Description = description;
						request.CreatedBy = createdBy;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.createProjectAsync( request, new CallOptions(GrpClient.GetMetadata( "TemplateManagement.Projects.ProjectIF_v1.createProject" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case ProjectIF_v1_createProjectResponse.ResultOneofCase.Value:
								TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO value;
								value = grpc_response.Value != null ? TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Success( value );

							case ProjectIF_v1_createProjectResponse.ResultOneofCase.Error:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case ProjectIF_v1_createProjectResponse.ResultOneofCase.None:
							default:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_createProject'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>> updateProject(TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO project)
				{
					try
					{
						// fill grpc request
						var request = new ProjectIF_v1_updateProjectRequest();
						request.Project = project != null ? TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO.ToGrpc( project ) : null;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.updateProjectAsync( request, new CallOptions(GrpClient.GetMetadata( "TemplateManagement.Projects.ProjectIF_v1.updateProject" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case ProjectIF_v1_updateProjectResponse.ResultOneofCase.Value:
								TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO value;
								value = grpc_response.Value != null ? TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Success( value );

							case ProjectIF_v1_updateProjectResponse.ResultOneofCase.Error:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case ProjectIF_v1_updateProjectResponse.ResultOneofCase.None:
							default:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_updateProject'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>> listAccessibleProjects()
				{
					try
					{
						// fill grpc request
						var request = new Empty();

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.listAccessibleProjectsAsync( request, new CallOptions(GrpClient.GetMetadata( "TemplateManagement.Projects.ProjectIF_v1.listAccessibleProjects" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case ProjectIF_v1_listAccessibleProjectsResponse.ResultOneofCase.Value:
								List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO> value = new();
								value.AddRange( grpc_response.Value.Value.Select( v => TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO.FromGrpc(v) ));
								return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Success( value );

							case ProjectIF_v1_listAccessibleProjectsResponse.ResultOneofCase.Error:
								return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case ProjectIF_v1_listAccessibleProjectsResponse.ResultOneofCase.None:
							default:
								return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_listAccessibleProjects'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>> listAccessibleProjectsForUser(string urseId)
				{
					try
					{
						// fill grpc request
						var request = new ProjectIF_v1_listAccessibleProjectsForUserRequest();
						request.UrseId = urseId;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.listAccessibleProjectsForUserAsync( request, new CallOptions(GrpClient.GetMetadata( "TemplateManagement.Projects.ProjectIF_v1.listAccessibleProjectsForUser" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case ProjectIF_v1_listAccessibleProjectsForUserResponse.ResultOneofCase.Value:
								List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO> value = new();
								value.AddRange( grpc_response.Value.Value.Select( v => TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO.FromGrpc(v) ));
								return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Success( value );

							case ProjectIF_v1_listAccessibleProjectsForUserResponse.ResultOneofCase.Error:
								return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case ProjectIF_v1_listAccessibleProjectsForUserResponse.ResultOneofCase.None:
							default:
								return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_listAccessibleProjectsForUser'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>> getProject(string projectId)
				{
					try
					{
						// fill grpc request
						var request = new ProjectIF_v1_getProjectRequest();
						request.ProjectId = projectId;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.getProjectAsync( request, new CallOptions(GrpClient.GetMetadata( "TemplateManagement.Projects.ProjectIF_v1.getProject" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case ProjectIF_v1_getProjectResponse.ResultOneofCase.Value:
								TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO value;
								value = grpc_response.Value != null ? TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Success( value );

							case ProjectIF_v1_getProjectResponse.ResultOneofCase.Error:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case ProjectIF_v1_getProjectResponse.ResultOneofCase.None:
							default:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_getProject'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>> addProjectAccess(string projectId, string identityId, TemplateManagement.Projects.IProjectIF_v1.ProjectAccessRoles role)
				{
					try
					{
						// fill grpc request
						var request = new ProjectIF_v1_addProjectAccessRequest();
						request.ProjectId = projectId;
						request.IdentityId = identityId;
						request.Role = TemplateManagement.Projects.IProjectIF_v1.ProjectAccessRolesMappings.ToGrpc( role );

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.addProjectAccessAsync( request, new CallOptions(GrpClient.GetMetadata( "TemplateManagement.Projects.ProjectIF_v1.addProjectAccess" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case ProjectIF_v1_addProjectAccessResponse.ResultOneofCase.Value:
								TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO value;
								value = grpc_response.Value != null ? TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Success( value );

							case ProjectIF_v1_addProjectAccessResponse.ResultOneofCase.Error:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case ProjectIF_v1_addProjectAccessResponse.ResultOneofCase.None:
							default:
								return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_addProjectAccess'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
