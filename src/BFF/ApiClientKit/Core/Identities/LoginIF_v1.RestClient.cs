
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using ServiceKit.Net;
using System.Net;
using System.Net.Http.Json;

namespace BFF.ApiClientKit
{
	static class Rest 
	{
		static class LoginIF
		{
			static class V1 
			{
				public static async Task<Response<Core.Identities.ILoginIF_v1.LoginResultDTO>> LoginWithEmailPassword(string email, string password)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/core/identities/loginif/v1/loginwithemailpassword/{email}/{password}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.LoginIF.V1.LoginWithEmailPassword" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Core.Identities.ILoginIF_v1.LoginResultDTO>();
							return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( error );
						}
						else
						{
							return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_LoginWithEmailPassword'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Core.Identities.ILoginIF_v1.TokensDTO>> LoginTwoFactor(string totp)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/core/identities/loginif/v1/logintwofactor/{totp}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.LoginIF.V1.LoginTwoFactor" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Core.Identities.ILoginIF_v1.TokensDTO>();
							return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( error );
						}
						else
						{
							return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'LoginIF_v1_LoginTwoFactor'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
