
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using Core.Identities.Protos.LoginIF_v1;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using ServiceKit.Net;

namespace BFF.ApiClientKit
{
	static class Grpc 
	{
		static class LoginIF
		{
			static class V1 
			{
				private static LoginIF_v1.LoginIF_v1Client _client;
				public static async Task<Response<Core.Identities.ILoginIF_v1.LoginResultDTO>> LoginWithEmailPassword(string email, string password)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_LoginWithEmailPasswordRequest();
						request.Email = email;
						request.Password = password;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.LoginWithEmailPasswordAsync( request, new CallOptions(GrpClient.GetMetadata( "Core.Identities.LoginIF_v1.LoginWithEmailPassword" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_LoginWithEmailPasswordResponse.ResultOneofCase.Value:
								Core.Identities.ILoginIF_v1.LoginResultDTO value;
								value = grpc_response.Value != null ? Core.Identities.ILoginIF_v1.LoginResultDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Success( value );

							case LoginIF_v1_LoginWithEmailPasswordResponse.ResultOneofCase.Error:
								return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_LoginWithEmailPasswordResponse.ResultOneofCase.None:
							default:
								return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_LoginWithEmailPassword'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Core.Identities.ILoginIF_v1.TokensDTO>> LoginTwoFactor(string totp)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_LoginTwoFactorRequest();
						request.Totp = totp;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.LoginTwoFactorAsync( request, new CallOptions(GrpClient.GetMetadata( "Core.Identities.LoginIF_v1.LoginTwoFactor" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_LoginTwoFactorResponse.ResultOneofCase.Value:
								Core.Identities.ILoginIF_v1.TokensDTO value;
								value = grpc_response.Value != null ? Core.Identities.ILoginIF_v1.TokensDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Success( value );

							case LoginIF_v1_LoginTwoFactorResponse.ResultOneofCase.Error:
								return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_LoginTwoFactorResponse.ResultOneofCase.None:
							default:
								return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_LoginTwoFactor'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
