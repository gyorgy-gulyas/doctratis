
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

import * as ProjectIF_v1 from "../../../types/TemplateManagement/Projects/ProjectIF_v1";
import { BFFRestClient } from "../../BFFRestClient";
import { AxiosError } from 'axios';

const apiClient = BFFRestClient.getInstance().apiClient

export const ProjectIF = {
    V1: {
        async createProject(name: string, description: string, createdBy: string): Promise<ProjectIF_v1.ProjectSummaryDTO> {
            try {
                const extraHeaders = apiClient.getRequestHeaders("TemplateManagement.Projects.createProject");

                const response = await apiClient.post<ProjectIF_v1.ProjectSummaryDTO>(
                    `/templatemanagement/projects/projectif/v1/createproject/${encodeURIComponent(name)}/${encodeURIComponent(description)}/${encodeURIComponent(createdBy)}`,
                    { headers: extraHeaders }
                );

                return response.value;
            }
            catch (error: AxiosError) {
                throw apiClient.mapApiError(error, "createProject");
            }
        }
        ,
        async updateProject(project: ProjectIF_v1.ProjectDetailsDTO): Promise<ProjectIF_v1.ProjectDetailsDTO> {
            try {
                const extraHeaders = apiClient.getRequestHeaders("TemplateManagement.Projects.updateProject");

                const response = await apiClient.post<ProjectIF_v1.ProjectDetailsDTO>(
                    `/templatemanagement/projects/projectif/v1/updateproject`,
                    project,
                    { headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
                );

                return response.value;
            }
            catch (error: AxiosError) {
                throw apiClient.mapApiError(error, "updateProject");
            }
        }
        ,
        async listAccessibleProjects(): Promise<ProjectIF_v1.ProjectSummaryDTO[]> {
            try {
                const extraHeaders = apiClient.getRequestHeaders("TemplateManagement.Projects.listAccessibleProjects");

                const response = await apiClient.get<ProjectIF_v1.ProjectSummaryDTO[]>(
                    `/templatemanagement/projects/projectif/v1/listaccessibleprojects`,
                    { headers: extraHeaders }
                );

                return response.value;
            }
            catch (error: AxiosError) {
                throw apiClient.mapApiError(error, "listAccessibleProjects");
            }
        }
        ,
        async listAccessibleProjectsForUser(urseId: string): Promise<ProjectIF_v1.ProjectSummaryDTO[]> {
            try {
                const extraHeaders = apiClient.getRequestHeaders("TemplateManagement.Projects.listAccessibleProjectsForUser");

                const response = await apiClient.get<ProjectIF_v1.ProjectSummaryDTO[]>(
                    `/templatemanagement/projects/projectif/v1/listaccessibleprojectsforuser/${encodeURIComponent(urseId)}`,
                    { headers: extraHeaders }
                );

                return response.value;
            }
            catch (error: AxiosError) {
                throw apiClient.mapApiError(error, "listAccessibleProjectsForUser");
            }
        }
        ,
        async getProject(projectId: string): Promise<ProjectIF_v1.ProjectDetailsDTO> {
            try {
                const extraHeaders = apiClient.getRequestHeaders("TemplateManagement.Projects.getProject");

                const response = await apiClient.post<ProjectIF_v1.ProjectDetailsDTO>(
                    `/templatemanagement/projects/projectif/v1/getproject/${encodeURIComponent(projectId)}`,
                    { headers: extraHeaders }
                );

                return response.value;
            }
            catch (error: AxiosError) {
                throw apiClient.mapApiError(error, "getProject");
            }
        }
        ,
        async addProjectAccess(projectId: string, identityId: string, role: ProjectIF_v1.ProjectAccessRoles): Promise<ProjectIF_v1.ProjectAccessDTO> {
            try {
                const extraHeaders = apiClient.getRequestHeaders("TemplateManagement.Projects.addProjectAccess");

                const response = await apiClient.post<ProjectIF_v1.ProjectAccessDTO>(
                    `/templatemanagement/projects/projectif/v1/addprojectaccess/${encodeURIComponent(projectId)}/${encodeURIComponent(identityId)}?_str_role=${role}`,
                    { headers: extraHeaders }
                );

                return response.value;
            }
            catch (error: AxiosError) {
                throw apiClient.mapApiError(error, "addProjectAccess");
            }
        }
        ,
    }
}
