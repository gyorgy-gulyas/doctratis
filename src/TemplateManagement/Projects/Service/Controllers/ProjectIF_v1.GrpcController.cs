
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Serilog.Context;
using ServiceKit.Net;
using TemplateManagement.Projects.Protos.ProjectIF_v1;

namespace TemplateManagement.Projects
{
	public class ProjectIF_v1_GrpcController : TemplateManagement.Projects.Protos.ProjectIF_v1.ProjectIF_v1.ProjectIF_v1Base 
	{
		private readonly ILogger<ProjectIF_v1_GrpcController> _logger;
		private readonly IProjectIF_v1 _service;

		public ProjectIF_v1_GrpcController( ILogger<ProjectIF_v1_GrpcController> logger, IProjectIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public override async Task<ProjectIF_v1_createProjectResponse> createProject( ProjectIF_v1_createProjectRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "ProjectIF_v1.createProject" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string name;
					name = request.Name;
					string description;
					description = request.Description;
					string createdBy;
					createdBy = request.CreatedBy;

					// calling the service function itself
					var response = await _service.createProject( ctx , name, description, createdBy );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new ProjectIF_v1_createProjectResponse();
							result.Value = response.Value != null ? IProjectIF_v1.ProjectSummaryDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new ProjectIF_v1_createProjectResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'ProjectIF_v1.createProject'",
								}
							};
						}
					}
					else
					{
						return new ProjectIF_v1_createProjectResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new ProjectIF_v1_createProjectResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<ProjectIF_v1_listAccesibleProjectsResponse> listAccesibleProjects( Empty request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "ProjectIF_v1.listAccesibleProjects" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{

					// calling the service function itself
					var response = await _service.listAccesibleProjects( ctx  );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new ProjectIF_v1_listAccesibleProjectsResponse();
							result.Value.Value.AddRange( response.Value.Select( v => IProjectIF_v1.ProjectSummaryDTO.ToGrpc( v ) ));
							return result;
						}
						else
						{
							return new ProjectIF_v1_listAccesibleProjectsResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'ProjectIF_v1.listAccesibleProjects'",
								}
							};
						}
					}
					else
					{
						return new ProjectIF_v1_listAccesibleProjectsResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new ProjectIF_v1_listAccesibleProjectsResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
