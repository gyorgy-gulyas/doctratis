
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using TemplateManagement.Projects;

namespace TemplateManagement.Projects.Project
{
	public partial class ProjectHeader : IBase, IEquatable<ProjectHeader>
	{
		#region IBase
		public string id { get; set; }
		public string etag { get; set; }
		public DateTime LastUpdate { get; set; }
		#endregion IBase

		public string Name { get; set; }
		public string Description { get; set; }
		public List<string> Tags { get; set; } = new();
		public ProjectStatuses Status { get; set; }
		public List<ProjectFolder> SubFolders { get; set; } = new();
		public DateTime CreatedAt { get; set; }
		public string CreatedByUserId { get; set; }
		public string CreatedByUserName { get; set; }

		#region Clone 
		public virtual ProjectHeader Clone()
		{
			ProjectHeader clone = new();

			// begin: Base
			// end: Base

			clone.Name = new string(Name.ToCharArray());
			clone.Description = new string(Description.ToCharArray());

			// clone of Tags
			clone.Tags.AddRange( Tags.Select( v => new string(v.ToCharArray()) ));
			clone.Status = Status;

			// clone of SubFolders
			clone.SubFolders.AddRange( SubFolders.Select( v => v.Clone() ));

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( ProjectHeader other )
		{
			if (other is null) return false;

			// begin: Base
			// end: Base

			if(Name != other.Name) return false;
			if(Description != other.Description) return false;

			// equals of Tags
			if(Tags.SequenceEqual(other.Tags) == false ) return false;
			if(Status != other.Status) return false;

			// equals of SubFolders
			if(SubFolders.SequenceEqual(other.SubFolders) == false ) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as ProjectHeader);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Base
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: Base

			hash.Add(Name);
			hash.Add(Description);

			// hash of Tags
			foreach( var element_Tags in Tags)
				hash.Add(element_Tags);
			hash.Add(Status);

			// hash of SubFolders
			foreach( var element_SubFolders in SubFolders)
				hash.Add(element_SubFolders);
			hash.Add(CreatedAt);
			hash.Add(CreatedByUserId);
			hash.Add(CreatedByUserName);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
