
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using TemplateManagement.Projects;

namespace TemplateManagement.Projects.Project
{
	public partial class ProjectAccess : Core.Base.IBaseEntity, IEquatable<ProjectAccess>
	{
		public enum Roles
		{
			/// Csak olvasásra jogosult
			Reader,

			/// Módosíthat sablonokat, mappákat
			Editor,

			/// Teljes hozzáférés, hozzáférések kezelése is
			Owner,

			/// Csak audit/jogosultság-nézethez van hozzáférése
			Auditor,

			/// Csak a hozzáférések kezelése
			Admin,

		}
		public enum Statuses
		{
			/// Meghívás elküldve, még nincs elfogadva. (pl. emailes invite)
			Pending,

			/// Hozzáférés él, a felhasználó vagy rendszer rendelkezik a szerepkörrel
			Active,

			/// Átmenetileg inaktiválva (pl. biztonsági okból, fiók zárolása).
			Suspended,

			/// Visszavonva manuálisan. Már nem érvényes.
			Revoked,

			/// Törölve, de még auditálás miatt megvan az adat.
			Deleted,

		}
		#region IBaseEntity
		public string id { get; set; }
		public string etag { get; set; }
		public DateTime LastUpdate { get; set; }
		#endregion IBaseEntity

		public string ProjectId { get; set; }
		public string ProjectName { get; set; }
		public string IdentityId { get; set; }
		public string IdentityName { get; set; }
		public Roles Role { get; set; }
		public Statuses Status { get; set; }

		#region Clone 
		public virtual ProjectAccess Clone()
		{
			ProjectAccess clone = new();

			// begin: BaseEntity
			// end: BaseEntity

			clone.ProjectId = new string(ProjectId.ToCharArray());
			clone.ProjectName = new string(ProjectName.ToCharArray());
			clone.IdentityId = new string(IdentityId.ToCharArray());
			clone.IdentityName = new string(IdentityName.ToCharArray());
			clone.Role = Role;
			clone.Status = Status;

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( ProjectAccess other )
		{
			if (other is null) return false;

			// begin: BaseEntity
			// end: BaseEntity

			if(ProjectId != other.ProjectId) return false;
			if(ProjectName != other.ProjectName) return false;
			if(IdentityId != other.IdentityId) return false;
			if(IdentityName != other.IdentityName) return false;
			if(Role != other.Role) return false;
			if(Status != other.Status) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as ProjectAccess);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			hash.Add(ProjectId);
			hash.Add(ProjectName);
			hash.Add(IdentityId);
			hash.Add(IdentityName);
			hash.Add(Role);
			hash.Add(Status);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
