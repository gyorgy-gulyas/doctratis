
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using ServiceKit.Net;
using TemplateManagement.Projects;

namespace TemplateManagement.Projects
{
	public partial interface IProjectIF_v1
	{
		/// <return>ProjectSummaryDTO</return>
		public Task<Response<ProjectSummaryDTO>> createProject(CallingContext ctx, string name, string description);

		/// <return>ProjectDetailsDTO</return>
		public Task<Response<ProjectDetailsDTO>> updateProject(CallingContext ctx, ProjectDetailsDTO project);

		/// <return>List<ProjectSummaryDTO></return>
		public Task<Response<List<ProjectSummaryDTO>>> listAccessibleProjects(CallingContext ctx);

		/// <return>List<ProjectSummaryDTO></return>
		public Task<Response<List<ProjectSummaryDTO>>> listAccessibleProjectsForUser(CallingContext ctx, string urseId);

		/// <return>ProjectDetailsDTO</return>
		public Task<Response<ProjectDetailsDTO>> getProject(CallingContext ctx, string projectId);

		/// <return>ProjectAccessDTO</return>
		public Task<Response<ProjectAccessDTO>> addProjectAccess(CallingContext ctx, string projectId, string identityId, ProjectAccessRoles role);


		public enum ProjectStatuses
		{
			/// A projekt még kialakítás alatt áll, sablonokat lehet hozzáadni, de nem éles.
			Draft,

			/// A projekt éles állapotban van, a benne lévő sablonokat használják, csak korlátozottan módosítható.
			Active,

			/// A projekt lezárva vagy lefagyasztva, tartalma nem módosítható (pl. audit miatt).
			Locked,

			/// A projekt kivezetett, csak olvasható, történeti célból van megtartva.
			Archived,

			/// A projekt törlésre lett jelölve, de még nem véglegesen törölt audit miatt.
			Deleted,

		}
		#region GrpcMapping
		public static class ProjectStatusesMappings
		{
			public static Protos.ProjectIF_v1.ProjectStatuses ToGrpc( IProjectIF_v1.ProjectStatuses @this )
			{
				return @this switch
				{
					IProjectIF_v1.ProjectStatuses.Draft => Protos.ProjectIF_v1.ProjectStatuses.Draft,
					IProjectIF_v1.ProjectStatuses.Active => Protos.ProjectIF_v1.ProjectStatuses.Active,
					IProjectIF_v1.ProjectStatuses.Locked => Protos.ProjectIF_v1.ProjectStatuses.Locked,
					IProjectIF_v1.ProjectStatuses.Archived => Protos.ProjectIF_v1.ProjectStatuses.Archived,
					IProjectIF_v1.ProjectStatuses.Deleted => Protos.ProjectIF_v1.ProjectStatuses.Deleted,
					_ => throw new NotImplementedException(), 
				};
			}

			public static IProjectIF_v1.ProjectStatuses FromGrpc( Protos.ProjectIF_v1.ProjectStatuses @this )
			{
				return @this switch
				{
					Protos.ProjectIF_v1.ProjectStatuses.Draft => IProjectIF_v1.ProjectStatuses.Draft,
					Protos.ProjectIF_v1.ProjectStatuses.Active => IProjectIF_v1.ProjectStatuses.Active,
					Protos.ProjectIF_v1.ProjectStatuses.Locked => IProjectIF_v1.ProjectStatuses.Locked,
					Protos.ProjectIF_v1.ProjectStatuses.Archived => IProjectIF_v1.ProjectStatuses.Archived,
					Protos.ProjectIF_v1.ProjectStatuses.Deleted => IProjectIF_v1.ProjectStatuses.Deleted,
					_ => throw new NotImplementedException(), 
				};
			}

		}
		#endregion GrpcMapping
		public enum ProjectAccessRoles
		{
			/// Csak olvasásra jogosult
			Reader,

			/// Módosíthat sablonokat, mappákat
			Editor,

			/// Teljes hozzáférés, hozzáférések kezelése is
			Owner,

			/// Csak audit/jogosultság-nézethez van hozzáférése
			Auditor,

			/// Csak a hozzáférések kezelése
			Admin,

		}
		#region GrpcMapping
		public static class ProjectAccessRolesMappings
		{
			public static Protos.ProjectIF_v1.ProjectAccessRoles ToGrpc( IProjectIF_v1.ProjectAccessRoles @this )
			{
				return @this switch
				{
					IProjectIF_v1.ProjectAccessRoles.Reader => Protos.ProjectIF_v1.ProjectAccessRoles.Reader,
					IProjectIF_v1.ProjectAccessRoles.Editor => Protos.ProjectIF_v1.ProjectAccessRoles.Editor,
					IProjectIF_v1.ProjectAccessRoles.Owner => Protos.ProjectIF_v1.ProjectAccessRoles.Owner,
					IProjectIF_v1.ProjectAccessRoles.Auditor => Protos.ProjectIF_v1.ProjectAccessRoles.Auditor,
					IProjectIF_v1.ProjectAccessRoles.Admin => Protos.ProjectIF_v1.ProjectAccessRoles.Admin,
					_ => throw new NotImplementedException(), 
				};
			}

			public static IProjectIF_v1.ProjectAccessRoles FromGrpc( Protos.ProjectIF_v1.ProjectAccessRoles @this )
			{
				return @this switch
				{
					Protos.ProjectIF_v1.ProjectAccessRoles.Reader => IProjectIF_v1.ProjectAccessRoles.Reader,
					Protos.ProjectIF_v1.ProjectAccessRoles.Editor => IProjectIF_v1.ProjectAccessRoles.Editor,
					Protos.ProjectIF_v1.ProjectAccessRoles.Owner => IProjectIF_v1.ProjectAccessRoles.Owner,
					Protos.ProjectIF_v1.ProjectAccessRoles.Auditor => IProjectIF_v1.ProjectAccessRoles.Auditor,
					Protos.ProjectIF_v1.ProjectAccessRoles.Admin => IProjectIF_v1.ProjectAccessRoles.Admin,
					_ => throw new NotImplementedException(), 
				};
			}

		}
		#endregion GrpcMapping
		public enum ProjectAccessStatuses
		{
			/// Meghívás elküldve, még nincs elfogadva. (pl. emailes invite)
			Pending,

			/// Hozzáférés él, a felhasználó vagy rendszer rendelkezik a szerepkörrel
			Active,

			/// Átmenetileg inaktiválva (pl. biztonsági okból, fiók zárolása).
			Suspended,

			/// Visszavonva manuálisan. Már nem érvényes.
			Revoked,

			/// Törölve, de még auditálás miatt megvan az adat.
			Deleted,

		}
		#region GrpcMapping
		public static class ProjectAccessStatusesMappings
		{
			public static Protos.ProjectIF_v1.ProjectAccessStatuses ToGrpc( IProjectIF_v1.ProjectAccessStatuses @this )
			{
				return @this switch
				{
					IProjectIF_v1.ProjectAccessStatuses.Pending => Protos.ProjectIF_v1.ProjectAccessStatuses.Pending,
					IProjectIF_v1.ProjectAccessStatuses.Active => Protos.ProjectIF_v1.ProjectAccessStatuses.Active,
					IProjectIF_v1.ProjectAccessStatuses.Suspended => Protos.ProjectIF_v1.ProjectAccessStatuses.Suspended,
					IProjectIF_v1.ProjectAccessStatuses.Revoked => Protos.ProjectIF_v1.ProjectAccessStatuses.Revoked,
					IProjectIF_v1.ProjectAccessStatuses.Deleted => Protos.ProjectIF_v1.ProjectAccessStatuses.Deleted,
					_ => throw new NotImplementedException(), 
				};
			}

			public static IProjectIF_v1.ProjectAccessStatuses FromGrpc( Protos.ProjectIF_v1.ProjectAccessStatuses @this )
			{
				return @this switch
				{
					Protos.ProjectIF_v1.ProjectAccessStatuses.Pending => IProjectIF_v1.ProjectAccessStatuses.Pending,
					Protos.ProjectIF_v1.ProjectAccessStatuses.Active => IProjectIF_v1.ProjectAccessStatuses.Active,
					Protos.ProjectIF_v1.ProjectAccessStatuses.Suspended => IProjectIF_v1.ProjectAccessStatuses.Suspended,
					Protos.ProjectIF_v1.ProjectAccessStatuses.Revoked => IProjectIF_v1.ProjectAccessStatuses.Revoked,
					Protos.ProjectIF_v1.ProjectAccessStatuses.Deleted => IProjectIF_v1.ProjectAccessStatuses.Deleted,
					_ => throw new NotImplementedException(), 
				};
			}

		}
		#endregion GrpcMapping
		public partial class ProjectFolderDTO : IEquatable<ProjectFolderDTO>
		{
			public string id { get; set; }
			public string Name { get; set; }
			public string Description { get; set; }
			public List<ProjectFolderDTO> SubFolders { get; set; } = new();

			#region Clone 
			public virtual ProjectFolderDTO Clone()
			{
				ProjectFolderDTO clone = new();

				clone.Name = new string(Name.ToCharArray());
				clone.Description = new string(Description.ToCharArray());

				// clone of SubFolders
				clone.SubFolders.AddRange( SubFolders.Select( v => v.Clone() ));

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ProjectFolderDTO other )
			{
				if (other is null) return false;

				if(Name != other.Name) return false;
				if(Description != other.Description) return false;

				// equals of SubFolders
				if(SubFolders.SequenceEqual(other.SubFolders) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ProjectFolderDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(Name);
				hash.Add(Description);

				// hash of SubFolders
				foreach( var element_SubFolders in SubFolders)
					hash.Add(element_SubFolders);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.ProjectIF_v1.ProjectFolderDTO ToGrpc( IProjectIF_v1.ProjectFolderDTO @this )
			{
				Protos.ProjectIF_v1.ProjectFolderDTO result = new();

				result.Id = @this.id;
				result.Name = @this.Name;
				result.Description = @this.Description;
				result.SubFolders.AddRange( @this.SubFolders.Select( v => IProjectIF_v1.ProjectFolderDTO.ToGrpc( v ) ));

				return result;
			}
			public static IProjectIF_v1.ProjectFolderDTO FromGrpc( Protos.ProjectIF_v1.ProjectFolderDTO @from )
			{
				IProjectIF_v1.ProjectFolderDTO result = new();

				result.id = @from.Id;
				result.Name = @from.Name;
				result.Description = @from.Description;
				result.SubFolders.AddRange( @from.SubFolders.Select( v => IProjectIF_v1.ProjectFolderDTO.FromGrpc(v) ));

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class ProjectAccessDTO : IEquatable<ProjectAccessDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public string IdentityId { get; set; }
			public string IdentityName { get; set; }
			public ProjectAccessRoles Role { get; set; }
			public ProjectAccessStatuses Status { get; set; }

			#region Clone 
			public virtual ProjectAccessDTO Clone()
			{
				ProjectAccessDTO clone = new();

				clone.IdentityId = new string(IdentityId.ToCharArray());
				clone.IdentityName = new string(IdentityName.ToCharArray());
				clone.Role = Role;
				clone.Status = Status;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ProjectAccessDTO other )
			{
				if (other is null) return false;

				if(IdentityId != other.IdentityId) return false;
				if(IdentityName != other.IdentityName) return false;
				if(Role != other.Role) return false;
				if(Status != other.Status) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ProjectAccessDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(IdentityId);
				hash.Add(IdentityName);
				hash.Add(Role);
				hash.Add(Status);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.ProjectIF_v1.ProjectAccessDTO ToGrpc( IProjectIF_v1.ProjectAccessDTO @this )
			{
				Protos.ProjectIF_v1.ProjectAccessDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.IdentityId = @this.IdentityId;
				result.IdentityName = @this.IdentityName;
				result.Role = IProjectIF_v1.ProjectAccessRolesMappings.ToGrpc( @this.Role );
				result.Status = IProjectIF_v1.ProjectAccessStatusesMappings.ToGrpc( @this.Status );

				return result;
			}
			public static IProjectIF_v1.ProjectAccessDTO FromGrpc( Protos.ProjectIF_v1.ProjectAccessDTO @from )
			{
				IProjectIF_v1.ProjectAccessDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.IdentityId = @from.IdentityId;
				result.IdentityName = @from.IdentityName;
				result.Role = IProjectIF_v1.ProjectAccessRolesMappings.FromGrpc( @from.Role) ;
				result.Status = IProjectIF_v1.ProjectAccessStatusesMappings.FromGrpc( @from.Status) ;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class ProjectSummaryDTO : IEquatable<ProjectSummaryDTO>
		{
			public string id { get; set; }
			public string Name { get; set; }
			public string Description { get; set; }
			public List<string> Tags { get; set; } = new();
			public ProjectStatuses Status { get; set; }

			#region Clone 
			public virtual ProjectSummaryDTO Clone()
			{
				ProjectSummaryDTO clone = new();

				clone.Name = new string(Name.ToCharArray());
				clone.Description = new string(Description.ToCharArray());

				// clone of Tags
				clone.Tags.AddRange( Tags.Select( v => new string(v.ToCharArray()) ));
				clone.Status = Status;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ProjectSummaryDTO other )
			{
				if (other is null) return false;

				if(Name != other.Name) return false;
				if(Description != other.Description) return false;

				// equals of Tags
				if(Tags.SequenceEqual(other.Tags) == false ) return false;
				if(Status != other.Status) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ProjectSummaryDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(Name);
				hash.Add(Description);

				// hash of Tags
				foreach( var element_Tags in Tags)
					hash.Add(element_Tags);
				hash.Add(Status);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.ProjectIF_v1.ProjectSummaryDTO ToGrpc( IProjectIF_v1.ProjectSummaryDTO @this )
			{
				Protos.ProjectIF_v1.ProjectSummaryDTO result = new();

				result.Id = @this.id;
				result.Name = @this.Name;
				result.Description = @this.Description;
				result.Tags.AddRange( @this.Tags);
				result.Status = IProjectIF_v1.ProjectStatusesMappings.ToGrpc( @this.Status );

				return result;
			}
			public static IProjectIF_v1.ProjectSummaryDTO FromGrpc( Protos.ProjectIF_v1.ProjectSummaryDTO @from )
			{
				IProjectIF_v1.ProjectSummaryDTO result = new();

				result.id = @from.Id;
				result.Name = @from.Name;
				result.Description = @from.Description;
				result.Tags.AddRange( @from.Tags);
				result.Status = IProjectIF_v1.ProjectStatusesMappings.FromGrpc( @from.Status) ;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class ProjectDetailsDTO : IEquatable<ProjectDetailsDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public string Name { get; set; }
			public string Description { get; set; }
			public List<string> Tags { get; set; } = new();
			public ProjectStatuses Status { get; set; }
			public List<ProjectFolderDTO> SubFolders { get; set; } = new();
			public List<ProjectAccessDTO> Accesses { get; set; } = new();
			public DateTime CreatedAt { get; set; }
			public string CreatedBy { get; set; }

			#region Clone 
			public virtual ProjectDetailsDTO Clone()
			{
				ProjectDetailsDTO clone = new();

				clone.Name = new string(Name.ToCharArray());
				clone.Description = new string(Description.ToCharArray());

				// clone of Tags
				clone.Tags.AddRange( Tags.Select( v => new string(v.ToCharArray()) ));
				clone.Status = Status;

				// clone of SubFolders
				clone.SubFolders.AddRange( SubFolders.Select( v => v.Clone() ));

				// clone of Accesses
				clone.Accesses.AddRange( Accesses.Select( v => v.Clone() ));
				clone.CreatedAt = CreatedAt;
				clone.CreatedBy = new string(CreatedBy.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ProjectDetailsDTO other )
			{
				if (other is null) return false;

				if(Name != other.Name) return false;
				if(Description != other.Description) return false;

				// equals of Tags
				if(Tags.SequenceEqual(other.Tags) == false ) return false;
				if(Status != other.Status) return false;

				// equals of SubFolders
				if(SubFolders.SequenceEqual(other.SubFolders) == false ) return false;

				// equals of Accesses
				if(Accesses.SequenceEqual(other.Accesses) == false ) return false;
				if(CreatedAt != other.CreatedAt) return false;
				if(CreatedBy != other.CreatedBy) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ProjectDetailsDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(Name);
				hash.Add(Description);

				// hash of Tags
				foreach( var element_Tags in Tags)
					hash.Add(element_Tags);
				hash.Add(Status);

				// hash of SubFolders
				foreach( var element_SubFolders in SubFolders)
					hash.Add(element_SubFolders);

				// hash of Accesses
				foreach( var element_Accesses in Accesses)
					hash.Add(element_Accesses);
				hash.Add(CreatedAt);
				hash.Add(CreatedBy);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.ProjectIF_v1.ProjectDetailsDTO ToGrpc( IProjectIF_v1.ProjectDetailsDTO @this )
			{
				Protos.ProjectIF_v1.ProjectDetailsDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.Name = @this.Name;
				result.Description = @this.Description;
				result.Tags.AddRange( @this.Tags);
				result.Status = IProjectIF_v1.ProjectStatusesMappings.ToGrpc( @this.Status );
				result.SubFolders.AddRange( @this.SubFolders.Select( v => IProjectIF_v1.ProjectFolderDTO.ToGrpc( v ) ));
				result.Accesses.AddRange( @this.Accesses.Select( v => IProjectIF_v1.ProjectAccessDTO.ToGrpc( v ) ));
				result.CreatedAt = Timestamp.FromDateTime(@this.CreatedAt);
				result.CreatedBy = @this.CreatedBy;

				return result;
			}
			public static IProjectIF_v1.ProjectDetailsDTO FromGrpc( Protos.ProjectIF_v1.ProjectDetailsDTO @from )
			{
				IProjectIF_v1.ProjectDetailsDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.Name = @from.Name;
				result.Description = @from.Description;
				result.Tags.AddRange( @from.Tags);
				result.Status = IProjectIF_v1.ProjectStatusesMappings.FromGrpc( @from.Status) ;
				result.SubFolders.AddRange( @from.SubFolders.Select( v => IProjectIF_v1.ProjectFolderDTO.FromGrpc(v) ));
				result.Accesses.AddRange( @from.Accesses.Select( v => IProjectIF_v1.ProjectAccessDTO.FromGrpc(v) ));
				result.CreatedAt = @from.CreatedAt.ToDateTime();
				result.CreatedBy = @from.CreatedBy;

				return result;
			}
			#endregion GrpcMapping
		}

	}
}
