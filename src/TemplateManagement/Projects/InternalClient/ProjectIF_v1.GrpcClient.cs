
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using ServiceKit.Net;
using TemplateManagement.Projects;
using TemplateManagement.Projects.Protos.ProjectIF_v1;

namespace TemplateManagement.Projects
{
	public class ProjectIF_v1_GrpcClient : IProjectIF_v1 
	{
		private readonly GrpcChannel _channel;
		private readonly ProjectIF_v1.ProjectIF_v1Client _client;

		ProjectIF_v1_GrpcClient( string serverAddress )
		{
			_channel = GrpcChannel.ForAddress(serverAddress);
			_client = new ProjectIF_v1.ProjectIF_v1Client(_channel);
		}

		/// <inheritdoc />
		async Task<Response<IProjectIF_v1.ProjectSummaryDTO>> IProjectIF_v1.createProject(CallingContext ctx, string name, string description, string createdBy)
		{
			try
			{
				// fill grpc request
				var request = new ProjectIF_v1_createProjectRequest();
				request.Name = name;
				request.Description = description;
				request.CreatedBy = createdBy;

				// calling grpc client
				var grpc_response = await _client.createProjectAsync( request, new CallOptions(ctx.ToGrpcMetadata( "TemplateManagementProjectsProjectIF_v1", "createProject" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case ProjectIF_v1_createProjectResponse.ResultOneofCase.Value:
						IProjectIF_v1.ProjectSummaryDTO value;
						value = grpc_response.Value != null ? IProjectIF_v1.ProjectSummaryDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IProjectIF_v1.ProjectSummaryDTO>.Success( value );

					case ProjectIF_v1_createProjectResponse.ResultOneofCase.Error:
						return Response<IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case ProjectIF_v1_createProjectResponse.ResultOneofCase.None:
					default:
						return Response<IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_createProject'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IProjectIF_v1.ProjectSummaryDTO>>> IProjectIF_v1.listAccessibleProjects(CallingContext ctx)
		{
			try
			{
				// fill grpc request
				var request = new Empty();

				// calling grpc client
				var grpc_response = await _client.listAccessibleProjectsAsync( request, new CallOptions(ctx.ToGrpcMetadata( "TemplateManagementProjectsProjectIF_v1", "listAccessibleProjects" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case ProjectIF_v1_listAccessibleProjectsResponse.ResultOneofCase.Value:
						List<IProjectIF_v1.ProjectSummaryDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IProjectIF_v1.ProjectSummaryDTO.FromGrpc(v) ));
						return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Success( value );

					case ProjectIF_v1_listAccessibleProjectsResponse.ResultOneofCase.Error:
						return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case ProjectIF_v1_listAccessibleProjectsResponse.ResultOneofCase.None:
					default:
						return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_listAccessibleProjects'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IProjectIF_v1.ProjectSummaryDTO>>> IProjectIF_v1.listAccessibleProjectsForUser(CallingContext ctx, string urseId)
		{
			try
			{
				// fill grpc request
				var request = new ProjectIF_v1_listAccessibleProjectsForUserRequest();
				request.UrseId = urseId;

				// calling grpc client
				var grpc_response = await _client.listAccessibleProjectsForUserAsync( request, new CallOptions(ctx.ToGrpcMetadata( "TemplateManagementProjectsProjectIF_v1", "listAccessibleProjectsForUser" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case ProjectIF_v1_listAccessibleProjectsForUserResponse.ResultOneofCase.Value:
						List<IProjectIF_v1.ProjectSummaryDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IProjectIF_v1.ProjectSummaryDTO.FromGrpc(v) ));
						return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Success( value );

					case ProjectIF_v1_listAccessibleProjectsForUserResponse.ResultOneofCase.Error:
						return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case ProjectIF_v1_listAccessibleProjectsForUserResponse.ResultOneofCase.None:
					default:
						return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_listAccessibleProjectsForUser'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IProjectIF_v1.ProjectSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IProjectIF_v1.ProjectDetailsDTO>> IProjectIF_v1.getProject(CallingContext ctx, string projectId)
		{
			try
			{
				// fill grpc request
				var request = new ProjectIF_v1_getProjectRequest();
				request.ProjectId = projectId;

				// calling grpc client
				var grpc_response = await _client.getProjectAsync( request, new CallOptions(ctx.ToGrpcMetadata( "TemplateManagementProjectsProjectIF_v1", "getProject" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case ProjectIF_v1_getProjectResponse.ResultOneofCase.Value:
						IProjectIF_v1.ProjectDetailsDTO value;
						value = grpc_response.Value != null ? IProjectIF_v1.ProjectDetailsDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IProjectIF_v1.ProjectDetailsDTO>.Success( value );

					case ProjectIF_v1_getProjectResponse.ResultOneofCase.Error:
						return Response<IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case ProjectIF_v1_getProjectResponse.ResultOneofCase.None:
					default:
						return Response<IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'ProjectIF_v1_getProject'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
