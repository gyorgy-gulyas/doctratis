
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using IAM.Identities;
using IAM.Identities.Protos.LoginIF_v1;
using ServiceKit.Net;

namespace BFF.ApiClientKit
{
	static partial class Grpc 
	{
		static class LoginIF
		{
			static class V1 
			{
				private static LoginIF_v1.LoginIF_v1Client _client;
			/// Login using email and password credentials
				public static async Task<Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>> LoginWithEmailPassword(string email, string password)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_LoginWithEmailPasswordRequest();
						request.Email = email;
						request.Password = password;

						// calling grpc client
						_client ??= new LoginIF_v1.LoginIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.LoginWithEmailPasswordAsync( request, new CallOptions(GrpClient.GetMetadata( "IAM.Identities.LoginIF_v1.LoginWithEmailPassword" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_LoginWithEmailPasswordResponse.ResultOneofCase.Value:
								IAM.Identities.ILoginIF_v1.LoginResultDTO value;
								value = grpc_response.Value != null ? IAM.Identities.ILoginIF_v1.LoginResultDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Success( value );

							case LoginIF_v1_LoginWithEmailPasswordResponse.ResultOneofCase.Error:
								return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_LoginWithEmailPasswordResponse.ResultOneofCase.None:
							default:
								return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_LoginWithEmailPassword'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			/// Complete login with Active Directory
				public static async Task<Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>> LoginWithAD(string username, string password)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_LoginWithADRequest();
						request.Username = username;
						request.Password = password;

						// calling grpc client
						_client ??= new LoginIF_v1.LoginIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.LoginWithADAsync( request, new CallOptions(GrpClient.GetMetadata( "IAM.Identities.LoginIF_v1.LoginWithAD" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_LoginWithADResponse.ResultOneofCase.Value:
								IAM.Identities.ILoginIF_v1.LoginResultDTO value;
								value = grpc_response.Value != null ? IAM.Identities.ILoginIF_v1.LoginResultDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Success( value );

							case LoginIF_v1_LoginWithADResponse.ResultOneofCase.Error:
								return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_LoginWithADResponse.ResultOneofCase.None:
							default:
								return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_LoginWithAD'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.LoginResultDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			/// Complete login with two-factor authentication (TOTP)
				public static async Task<Response<IAM.Identities.ILoginIF_v1.TokensDTO>> Login2FA(string code)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_Login2FARequest();
						request.Code = code;

						// calling grpc client
						_client ??= new LoginIF_v1.LoginIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.Login2FAAsync( request, new CallOptions(GrpClient.GetMetadata( "IAM.Identities.LoginIF_v1.Login2FA" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_Login2FAResponse.ResultOneofCase.Value:
								IAM.Identities.ILoginIF_v1.TokensDTO value;
								value = grpc_response.Value != null ? IAM.Identities.ILoginIF_v1.TokensDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Success( value );

							case LoginIF_v1_Login2FAResponse.ResultOneofCase.Error:
								return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_Login2FAResponse.ResultOneofCase.None:
							default:
								return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_Login2FA'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			/// refresh bearer tokens
				public static async Task<Response<IAM.Identities.ILoginIF_v1.TokensDTO>> RefreshTokens(string refreshToken)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_RefreshTokensRequest();
						request.RefreshToken = refreshToken;

						// calling grpc client
						_client ??= new LoginIF_v1.LoginIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.RefreshTokensAsync( request, new CallOptions(GrpClient.GetMetadata( "IAM.Identities.LoginIF_v1.RefreshTokens" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_RefreshTokensResponse.ResultOneofCase.Value:
								IAM.Identities.ILoginIF_v1.TokensDTO value;
								value = grpc_response.Value != null ? IAM.Identities.ILoginIF_v1.TokensDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Success( value );

							case LoginIF_v1_RefreshTokensResponse.ResultOneofCase.Error:
								return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_RefreshTokensResponse.ResultOneofCase.None:
							default:
								return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_RefreshTokens'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<IAM.Identities.ILoginIF_v1.TokensDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			/// getting the KAU url, expects the frontend url, where the frontend must be redirected
			/// the redirect url format is: {redirectUrl}/?accessToken={string}&refreshToken={string&requires2FA={boolean}&accessTokenExpiresAt={string}&refreshTokenExpiresAt={string}
			/// Generates the KAÜ login URL with a signed state containing the frontend returnUrl.
			/// Flow:
			/// 1. Browser calls this endpoint (GetKAULoginUrl) and passes the desired frontend returnUrl.
			/// 2. Backend builds the KAÜ authorize URL with its own callback URL and the signed state.
			/// 3. Browser is redirected to KAÜ login page.
			/// 4. KAÜ authenticates the user and redirects the browser to the backend callback URL with code + state.
			/// 5. Backend exchanges the code for tokens and finally redirects the browser to the original frontend returnUrl.
			/// Note: For local development KAÜ must be able to call the backend callback URL (use ngrok/dev tunnel).
			/// returns: the KAU url, where the browser must be redirected.
				public static async Task<Response<string>> GetKAULoginURL(string redirectUrl)
				{
					try
					{
						// fill grpc request
						var request = new LoginIF_v1_GetKAULoginURLRequest();
						request.RedirectUrl = redirectUrl;

						// calling grpc client
						_client ??= new LoginIF_v1.LoginIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.GetKAULoginURLAsync( request, new CallOptions(GrpClient.GetMetadata( "IAM.Identities.LoginIF_v1.GetKAULoginURL" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case LoginIF_v1_GetKAULoginURLResponse.ResultOneofCase.Value:
								string value;
								value = grpc_response.Value;
								return Response<string>.Success( value );

							case LoginIF_v1_GetKAULoginURLResponse.ResultOneofCase.Error:
								return Response<string>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case LoginIF_v1_GetKAULoginURLResponse.ResultOneofCase.None:
							default:
								return Response<string>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'LoginIF_v1_GetKAULoginURL'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<string>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<string>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
