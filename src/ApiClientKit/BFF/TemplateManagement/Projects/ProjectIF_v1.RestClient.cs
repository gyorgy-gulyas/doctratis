
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using ServiceKit.Net;
using System.Net;
using System.Net.Http.Json;
using System.Text.Json;
using TemplateManagement.Projects;

namespace BFF.ApiClientKit
{
	static partial class Rest 
	{
		static class ProjectIF
		{
			static class V1 
			{
				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>> createProject(string name, string description)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/templatemanagement/projects/projectif/v1/createproject/{name}/{description}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "TemplateManagement.Projects.ProjectIF.V1.createProject" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( error );
						}
						else
						{
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'ProjectIF_v1_createProject'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectSummaryDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>> updateProject(TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO project)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/templatemanagement/projects/projectif/v1/None" ) );

						// build content
						request.Content = new StringContent( JsonSerializer.Serialize<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>( project ));

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "TemplateManagement.Projects.ProjectIF.V1.updateProject" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( error );
						}
						else
						{
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'ProjectIF_v1_updateProject'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>> listAccessibleProjects()
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/templatemanagement/projects/projectif/v1/None" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "TemplateManagement.Projects.ProjectIF.V1.listAccessibleProjects" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>();
							return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( error );
						}
						else
						{
							return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'ProjectIF_v1_listAccessibleProjects'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>> listAccessibleProjectsForUser(string userId)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/templatemanagement/projects/projectif/v1/listaccessibleprojectsforuser/{userId}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "TemplateManagement.Projects.ProjectIF.V1.listAccessibleProjectsForUser" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>();
							return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( error );
						}
						else
						{
							return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'ProjectIF_v1_listAccessibleProjectsForUser'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<List<TemplateManagement.Projects.IProjectIF_v1.ProjectIdentityAssignmentDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>> getProject(string projectId)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/templatemanagement/projects/projectif/v1/getproject/{projectId}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "TemplateManagement.Projects.ProjectIF.V1.getProject" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( error );
						}
						else
						{
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'ProjectIF_v1_getProject'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectDetailsDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>> addProjectAccess(string projectId, string identityId, TemplateManagement.Projects.IProjectIF_v1.ProjectAccessRoles role)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/templatemanagement/projects/projectif/v1/addprojectaccess/{projectId}/{identityId}?_str_role={role.ToString()}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "TemplateManagement.Projects.ProjectIF.V1.addProjectAccess" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( error );
						}
						else
						{
							return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'ProjectIF_v1_addProjectAccess'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<TemplateManagement.Projects.IProjectIF_v1.ProjectAccessDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
