
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using ServiceKit.Net;
using System.Net;
using System.Net.Http.Json;
using System.Text.Json;

namespace Admin.ApiClientKit
{
	static partial class Rest 
	{
		static class IdentityAdminIF
		{
			static class V1 
			{
				public static async Task<Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>> RegisterLdapDomain(Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO ldap)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/core/identities/identityadminif/v1/None" ) );

						// build content
						request.Content = new StringContent( JsonSerializer.Serialize<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>( ldap ));

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.IdentityAdminIF.V1.RegisterLdapDomain" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>();
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( error );
						}
						else
						{
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_RegisterLdapDomain'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>> GetAllRegisteredLdapDomain()
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/core/identities/identityadminif/v1/None" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.IdentityAdminIF.V1.GetAllRegisteredLdapDomain" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>();
							return Response<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( error );
						}
						else
						{
							return Response<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_GetAllRegisteredLdapDomain'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<List<Core.Identities.IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>> GetRegisteredLdapDomain(string id)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/core/identities/identityadminif/v1/getregisteredldapdomain/{id}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.IdentityAdminIF.V1.GetRegisteredLdapDomain" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>();
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( error );
						}
						else
						{
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_GetRegisteredLdapDomain'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>> UpdateRegisteredLdapDomain(Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO ldap)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/core/identities/identityadminif/v1/None" ) );

						// build content
						request.Content = new StringContent( JsonSerializer.Serialize<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>( ldap ));

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.IdentityAdminIF.V1.UpdateRegisteredLdapDomain" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>();
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( error );
						}
						else
						{
							return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_UpdateRegisteredLdapDomain'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>> getAllAccount()
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/core/identities/identityadminif/v1/None" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.IdentityAdminIF.V1.getAllAccount" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>();
							return Response<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( error );
						}
						else
						{
							return Response<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getAllAccount'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<List<Core.Identities.IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Core.Identities.IIdentityAdminIF_v1.AccountDTO>> getAccount(string id)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/core/identities/identityadminif/v1/getaccount/{id}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Core.Identities.IdentityAdminIF.V1.getAccount" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Core.Identities.IIdentityAdminIF_v1.AccountDTO>();
							return Response<Core.Identities.IIdentityAdminIF_v1.AccountDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Core.Identities.IIdentityAdminIF_v1.AccountDTO>.Failure( error );
						}
						else
						{
							return Response<Core.Identities.IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'IdentityAdminIF_v1_getAccount'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Core.Identities.IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
