
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

import * as IdentityAdminIF_v1 from "../../../types/IAM/Identities/IdentityAdminIF_v1";
import { AxiosError } from 'axios';
import { AdminRestClient } from "../../../api/AdminRestClient";

const rest = AdminRestClient.getInstance()

export const IdentityAdminIF = {
	V1: {
		async RegisterLdapDomain(ldap: IdentityAdminIF_v1.LdapDomainDTO): Promise<IdentityAdminIF_v1.LdapDomainDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.RegisterLdapDomain");

				const response = await rest.axios.post<IdentityAdminIF_v1.LdapDomainDTO>(
					`/iam/identities/identityadminif/v1/registerldapdomain`,
					ldap,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "RegisterLdapDomain");
			}
		}
		,
		async UpdateRegisteredLdapDomain(ldap: IdentityAdminIF_v1.LdapDomainDTO): Promise<IdentityAdminIF_v1.LdapDomainDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.UpdateRegisteredLdapDomain");

				const response = await rest.axios.post<IdentityAdminIF_v1.LdapDomainDTO>(
					`/iam/identities/identityadminif/v1/updateregisteredldapdomain`,
					ldap,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "UpdateRegisteredLdapDomain");
			}
		}
		,
		async GetAllRegisteredLdapDomain(): Promise<IdentityAdminIF_v1.LdapDomainSummaryDTO[]> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.GetAllRegisteredLdapDomain");

				const response = await rest.axios.get<IdentityAdminIF_v1.LdapDomainSummaryDTO[]>(
					`/iam/identities/identityadminif/v1/getallregisteredldapdomain`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "GetAllRegisteredLdapDomain");
			}
		}
		,
		async GetRegisteredLdapDomain(id: string): Promise<IdentityAdminIF_v1.LdapDomainDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.GetRegisteredLdapDomain");

				const response = await rest.axios.get<IdentityAdminIF_v1.LdapDomainDTO>(
					`/iam/identities/identityadminif/v1/getregisteredldapdomain/${encodeURIComponent(id)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "GetRegisteredLdapDomain");
			}
		}
		,
		async getAllAccount(): Promise<IdentityAdminIF_v1.AccountSummaryDTO[]> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.getAllAccount");

				const response = await rest.axios.post<IdentityAdminIF_v1.AccountSummaryDTO[]>(
					`/iam/identities/identityadminif/v1/getallaccount`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getAllAccount");
			}
		}
		,
		async getAccount(id: string): Promise<IdentityAdminIF_v1.AccountDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.getAccount");

				const response = await rest.axios.post<IdentityAdminIF_v1.AccountDTO>(
					`/iam/identities/identityadminif/v1/getaccount/${encodeURIComponent(id)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getAccount");
			}
		}
		,
		async createAccount(username: string, accountType: IdentityAdminIF_v1.AccountTypes): Promise<IdentityAdminIF_v1.AccountDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.createAccount");

				const response = await rest.axios.post<IdentityAdminIF_v1.AccountDTO>(
					`/iam/identities/identityadminif/v1/createaccount/${encodeURIComponent(username)}?_str_accountType=${accountType}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "createAccount");
			}
		}
		,
		async updateAccount(accountId: string, etag: string, data: IdentityAdminIF_v1.AccountDataDTO): Promise<IdentityAdminIF_v1.AccountDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.updateAccount");

				const response = await rest.axios.post<IdentityAdminIF_v1.AccountDTO>(
					`/iam/identities/identityadminif/v1/updateaccount/${encodeURIComponent(accountId)}/${encodeURIComponent(etag)}`,
					data,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "updateAccount");
			}
		}
		,
		async listAuthsForAccount(accountId: string): Promise<IdentityAdminIF_v1.AuthDTO[]> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.listAuthsForAccount");

				const response = await rest.axios.post<IdentityAdminIF_v1.AuthDTO[]>(
					`/iam/identities/identityadminif/v1/listauthsforaccount/${encodeURIComponent(accountId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "listAuthsForAccount");
			}
		}
		,
		async setActiveForAuth(accountId: string, authId: string, etag: string, isActive: boolean): Promise<IdentityAdminIF_v1.AuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.setActiveForAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.AuthDTO>(
					`/iam/identities/identityadminif/v1/setactiveforauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}?isActive={isActive.toString()}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "setActiveForAuth");
			}
		}
		,
		async createtEmailAuth(accountId: string, email: string, initialPassword: string, twoFactor: IdentityAdminIF_v1.TwoFactorConfigurationDTO): Promise<IdentityAdminIF_v1.EmailAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.createtEmailAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.EmailAuthDTO>(
					`/iam/identities/identityadminif/v1/createtemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(email)}/${encodeURIComponent(initialPassword)}`,
					twoFactor,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "createtEmailAuth");
			}
		}
		,
		async getEmailAuth(accountId: string, authId: string): Promise<IdentityAdminIF_v1.EmailAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.getEmailAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.EmailAuthDTO>(
					`/iam/identities/identityadminif/v1/getemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getEmailAuth");
			}
		}
		,
		async changePasswordOnEmailAuth(accountId: string, authId: string, etag: string, newPassword: string): Promise<IdentityAdminIF_v1.EmailAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.changePasswordOnEmailAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.EmailAuthDTO>(
					`/iam/identities/identityadminif/v1/changepasswordonemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}/${encodeURIComponent(newPassword)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "changePasswordOnEmailAuth");
			}
		}
		,
		async setTwoFactorOnEmailAuth(accountId: string, authId: string, etag: string, twoFactor: IdentityAdminIF_v1.TwoFactorConfigurationDTO): Promise<IdentityAdminIF_v1.EmailAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.setTwoFactorOnEmailAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.EmailAuthDTO>(
					`/iam/identities/identityadminif/v1/settwofactoronemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}`,
					twoFactor,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "setTwoFactorOnEmailAuth");
			}
		}
		,
		async confirmEmail(token: string): Promise<boolean> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.confirmEmail");

				const response = await rest.axios.post<boolean>(
					`/iam/identities/identityadminif/v1/confirmemail/${encodeURIComponent(token)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "confirmEmail");
			}
		}
		,
		async createADAuth(accountId: string, ldapDomainId: string, adUsername: string, twoFactor: IdentityAdminIF_v1.TwoFactorConfigurationDTO): Promise<IdentityAdminIF_v1.ADAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.createADAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.ADAuthDTO>(
					`/iam/identities/identityadminif/v1/createadauth/${encodeURIComponent(accountId)}/${encodeURIComponent(ldapDomainId)}/${encodeURIComponent(adUsername)}`,
					twoFactor,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "createADAuth");
			}
		}
		,
		async getADAuth(accountId: string, authId: string): Promise<IdentityAdminIF_v1.ADAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.getADAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.ADAuthDTO>(
					`/iam/identities/identityadminif/v1/getadauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getADAuth");
			}
		}
		,
		async setTwoFactorOnADAuth(accountId: string, authId: string, etag: string, twoFactor: IdentityAdminIF_v1.TwoFactorConfigurationDTO): Promise<IdentityAdminIF_v1.ADAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.setTwoFactorOnADAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.ADAuthDTO>(
					`/iam/identities/identityadminif/v1/settwofactoronadauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}`,
					twoFactor,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "setTwoFactorOnADAuth");
			}
		}
		,
		async createKAUAuth(accountId: string, kauUserId: string, twoFactor: IdentityAdminIF_v1.TwoFactorConfigurationDTO): Promise<IdentityAdminIF_v1.KAUAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.createKAUAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.KAUAuthDTO>(
					`/iam/identities/identityadminif/v1/createkauauth/${encodeURIComponent(accountId)}/${encodeURIComponent(kauUserId)}`,
					twoFactor,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "createKAUAuth");
			}
		}
		,
		async getKAUAuth(accountId: string, authId: string): Promise<IdentityAdminIF_v1.KAUAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.getKAUAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.KAUAuthDTO>(
					`/iam/identities/identityadminif/v1/getkauauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getKAUAuth");
			}
		}
		,
		async setTwoFactorOnKAUAuth(accountId: string, authId: string, etag: string, twoFactor: IdentityAdminIF_v1.TwoFactorConfigurationDTO): Promise<IdentityAdminIF_v1.KAUAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.setTwoFactorOnKAUAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.KAUAuthDTO>(
					`/iam/identities/identityadminif/v1/settwofactoronkauauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}`,
					twoFactor,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "setTwoFactorOnKAUAuth");
			}
		}
		,
		async createCertificateAuthFromCSR(accountId: string, data: IdentityAdminIF_v1.CsrInputDTO): Promise<IdentityAdminIF_v1.CertificateAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.createCertificateAuthFromCSR");

				const response = await rest.axios.post<IdentityAdminIF_v1.CertificateAuthDTO>(
					`/iam/identities/identityadminif/v1/createcertificateauthfromcsr/${encodeURIComponent(accountId)}`,
					data,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "createCertificateAuthFromCSR");
			}
		}
		,
		async revokeCertificate(accountId: string, authId: string, etag: string, reason: string): Promise<IdentityAdminIF_v1.CertificateAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.revokeCertificate");

				const response = await rest.axios.post<IdentityAdminIF_v1.CertificateAuthDTO>(
					`/iam/identities/identityadminif/v1/revokecertificate/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}/${encodeURIComponent(reason)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "revokeCertificate");
			}
		}
		,
		async getCertificateAuth(accountId: string, authId: string): Promise<IdentityAdminIF_v1.CertificateAuthDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.getCertificateAuth");

				const response = await rest.axios.post<IdentityAdminIF_v1.CertificateAuthDTO>(
					`/iam/identities/identityadminif/v1/getcertificateauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getCertificateAuth");
			}
		}
		,
		}
}
