
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>



export enum AccountTypes {
	User = "User",
	ExternalSystem = "ExternalSystem",
	InternalService = "InternalService",
}
export interface LdapDomainDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	/// Fully Qualified Domain Name (e.g. yourdomain.local)
	name:string;
	/// Optional description or notes
	description:string;
	/// NetBIOS name (e.g. YOURDOMAIN)
	netbiosName:string;
	/// List of Domain Controller hostnames or IP addresses
	domainControllers:LdapDomainDTO.DomainController[];
	/// Base Distinguished Name (where LDAP queries start, e.g. DC=yourdomain,DC=local)
	baseDn:string;
	/// Whether to use secure LDAP (LDAPS)
	useSecureLdap:boolean;
	/// Service account username used for directory queries (if required)
	serviceAccountUser:string;
	/// Service account password (should be stored securely/encrypted)
	serviceAccountPassword:string;
}

export namespace LdapDomainDTO {
	export interface DomainController {
		/// Hostname or IP address of the DC
		host:string;
		/// LDAP or LDAPS port (e.g. 389 or 636)
		port:number;
	}

}
export interface LdapDomainSummaryDTO {
	id:string;
	/// Fully Qualified Domain Name (e.g. yourdomain.local)
	name:string;
	/// Optional description or notes
	description:string;
}

export interface AccountSummaryDTO {
	id:string;
	Type:AccountTypes;
	Name:string;
	isActive:boolean;
}

export interface AccountDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	data:AccountDataDTO;
}

export interface AccountDataDTO {
	Type:AccountTypes;
	Name:string;
	isActive:boolean;
	contacts:ContactInfo[];
}

export interface ContactInfo {
	contactType:string;
	email:string;
	phoneNumber:string;
}

export interface AuthDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	method:AuthDTO.Methods;
	isActive:boolean;
}

export namespace AuthDTO {

	export enum Methods {
		Email = "Email",
		ActiveDirectory = "ActiveDirectory",
		KAU = "KAU",
		Certificate = "Certificate",
	}
}
export interface TwoFactorConfigurationDTO {
	enabled:boolean;
	method:TwoFactorConfigurationDTO.Methods;
	phoneNumber:string;
	email:string;
}

export namespace TwoFactorConfigurationDTO {

	export enum Methods {
		/// Time-based One-Time Password (e.g. Google Authenticator)
		TOTP = "TOTP",

		/// SMS-based OTP
		SMS = "SMS",

		/// Email-based OTP
		Email = "Email",

	}
}
/// Password-based authentication
export interface EmailAuthDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	isActive:boolean;
	email:string;
	isEmailConfirmed:boolean;
	passwordExpiresAt:string;
	twoFactor:TwoFactorConfigurationDTO;
}

/// Active Directory-based authentication
export interface ADAuthDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	isActive:boolean;
	/// Active Directory domain
	LdapDomainId:string;
	LdapDomainName:string;
	/// Active Directory username
	userName:string;
	/// Optional two-factor authentication settings (TOTP, SMS, Email)
	twoFactor:TwoFactorConfigurationDTO;
}

/// KAU Ügyfélkapu authentication
export interface KAUAuthDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	isActive:boolean;
	/// Government-issued unique identifier (Ügyfélkapu ID)
	KAUUserId:string;
	/// User’s full legal name as returned by the service
	legalName:string;
	/// Email address verified by the service (optional)
	email:string;
	/// Optional two-factor authentication settings (TOTP, SMS, Email)
	twoFactor:TwoFactorConfigurationDTO;
}

/// Certificate-based authentication
export interface CertificateAuthDTO {
	id:string;
	etag:string;
	LastUpdate:Date;
	isActive:boolean;
	certificateThumbprint:string;
	serialNumber:string;
	issuer:string;
	subject:string;
	publicKeyHash:string;
	validFrom:Date;
	validUntil:Date;
	isRevoked:boolean;
	revocationReason:string;
	revokedAt:Date;
}

export interface CsrInputDTO {
	csrPem:string;
	/// CA profil/sablon (opcionális)
	profile:string;
}

