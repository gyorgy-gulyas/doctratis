"use strict";
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityAdminIF = void 0;
const AdminRestClient_1 = require("../../../api/AdminRestClient");
const rest = AdminRestClient_1.AdminRestClient.getInstance();
exports.IdentityAdminIF = {
    V1: {
        RegisterLdapDomain(ldap) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.RegisterLdapDomain");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/registerldapdomain`, ldap, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "RegisterLdapDomain");
                }
            });
        },
        UpdateRegisteredLdapDomain(ldap) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.UpdateRegisteredLdapDomain");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/updateregisteredldapdomain`, ldap, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "UpdateRegisteredLdapDomain");
                }
            });
        },
        GetAllRegisteredLdapDomain() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.GetAllRegisteredLdapDomain");
                    const response = yield rest.axios.get(`/iam/identities/identityadminif/v1/getallregisteredldapdomain`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "GetAllRegisteredLdapDomain");
                }
            });
        },
        GetRegisteredLdapDomain(id) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.GetRegisteredLdapDomain");
                    const response = yield rest.axios.get(`/iam/identities/identityadminif/v1/getregisteredldapdomain/${encodeURIComponent(id)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "GetRegisteredLdapDomain");
                }
            });
        },
        getAllAccount() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.getAllAccount");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/getallaccount`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getAllAccount");
                }
            });
        },
        getAccount(id) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.getAccount");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/getaccount/${encodeURIComponent(id)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getAccount");
                }
            });
        },
        createAccount(username, accountType) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.createAccount");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/createaccount/${encodeURIComponent(username)}?_str_accountType=${accountType}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "createAccount");
                }
            });
        },
        updateAccount(accountId, etag, data) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.updateAccount");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/updateaccount/${encodeURIComponent(accountId)}/${encodeURIComponent(etag)}`, data, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "updateAccount");
                }
            });
        },
        listAuthsForAccount(accountId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.listAuthsForAccount");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/listauthsforaccount/${encodeURIComponent(accountId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "listAuthsForAccount");
                }
            });
        },
        setActiveForAuth(accountId, authId, etag, isActive) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.setActiveForAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/setactiveforauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}?isActive={isActive.toString()}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "setActiveForAuth");
                }
            });
        },
        createtEmailAuth(accountId, email, initialPassword, twoFactor) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.createtEmailAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/createtemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(email)}/${encodeURIComponent(initialPassword)}`, twoFactor, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "createtEmailAuth");
                }
            });
        },
        getEmailAuth(accountId, authId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.getEmailAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/getemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getEmailAuth");
                }
            });
        },
        changePasswordOnEmailAuth(accountId, authId, etag, newPassword) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.changePasswordOnEmailAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/changepasswordonemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}/${encodeURIComponent(newPassword)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "changePasswordOnEmailAuth");
                }
            });
        },
        setTwoFactorOnEmailAuth(accountId, authId, etag, twoFactor) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.setTwoFactorOnEmailAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/settwofactoronemailauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}`, twoFactor, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "setTwoFactorOnEmailAuth");
                }
            });
        },
        confirmEmail(token) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.confirmEmail");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/confirmemail/${encodeURIComponent(token)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "confirmEmail");
                }
            });
        },
        createADAuth(accountId, ldapDomainId, adUsername, twoFactor) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.createADAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/createadauth/${encodeURIComponent(accountId)}/${encodeURIComponent(ldapDomainId)}/${encodeURIComponent(adUsername)}`, twoFactor, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "createADAuth");
                }
            });
        },
        getADAuth(accountId, authId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.getADAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/getadauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getADAuth");
                }
            });
        },
        setTwoFactorOnADAuth(accountId, authId, etag, twoFactor) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.setTwoFactorOnADAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/settwofactoronadauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}`, twoFactor, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "setTwoFactorOnADAuth");
                }
            });
        },
        createKAUAuth(accountId, kauUserId, twoFactor) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.createKAUAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/createkauauth/${encodeURIComponent(accountId)}/${encodeURIComponent(kauUserId)}`, twoFactor, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "createKAUAuth");
                }
            });
        },
        getKAUAuth(accountId, authId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.getKAUAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/getkauauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getKAUAuth");
                }
            });
        },
        setTwoFactorOnKAUAuth(accountId, authId, etag, twoFactor) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.setTwoFactorOnKAUAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/settwofactoronkauauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}`, twoFactor, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "setTwoFactorOnKAUAuth");
                }
            });
        },
        createCertificateAuthFromCSR(accountId, data) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.createCertificateAuthFromCSR");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/createcertificateauthfromcsr/${encodeURIComponent(accountId)}`, data, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "createCertificateAuthFromCSR");
                }
            });
        },
        revokeCertificate(accountId, authId, etag, reason) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.revokeCertificate");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/revokecertificate/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}/${encodeURIComponent(etag)}/${encodeURIComponent(reason)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "revokeCertificate");
                }
            });
        },
        getCertificateAuth(accountId, authId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.getCertificateAuth");
                    const response = yield rest.axios.post(`/iam/identities/identityadminif/v1/getcertificateauth/${encodeURIComponent(accountId)}/${encodeURIComponent(authId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getCertificateAuth");
                }
            });
        },
    }
};
//# sourceMappingURL=IdentityAdminIF_v1.RestClient.js.map