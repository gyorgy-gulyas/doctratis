// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BFFRestClient } from "../../../api/BFFRestClient";
const rest = BFFRestClient.getInstance();
export const ProjectIF = {
    V1: {
        createProject(name, description) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.createProject");
                    const response = yield rest.axios.post(`/templatemanagement/projects/projectif/v1/createproject/${encodeURIComponent(name)}/${encodeURIComponent(description)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "createProject");
                }
            });
        },
        updateProject(project) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.updateProject");
                    const response = yield rest.axios.post(`/templatemanagement/projects/projectif/v1/updateproject`, project, { headers: Object.assign(Object.assign({}, extraHeaders), { 'Content-Type': 'application/json' }) });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "updateProject");
                }
            });
        },
        listAccessibleProjects() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.listAccessibleProjects");
                    const response = yield rest.axios.get(`/templatemanagement/projects/projectif/v1/listaccessibleprojects`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "listAccessibleProjects");
                }
            });
        },
        listAccessibleProjectsForUser(userId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.listAccessibleProjectsForUser");
                    const response = yield rest.axios.get(`/templatemanagement/projects/projectif/v1/listaccessibleprojectsforuser/${encodeURIComponent(userId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "listAccessibleProjectsForUser");
                }
            });
        },
        getProject(projectId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.getProject");
                    const response = yield rest.axios.post(`/templatemanagement/projects/projectif/v1/getproject/${encodeURIComponent(projectId)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "getProject");
                }
            });
        },
        addProjectAccess(projectId, identityId, role) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.addProjectAccess");
                    const response = yield rest.axios.post(`/templatemanagement/projects/projectif/v1/addprojectaccess/${encodeURIComponent(projectId)}/${encodeURIComponent(identityId)}?_str_role=${role}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "addProjectAccess");
                }
            });
        },
    }
};
//# sourceMappingURL=ProjectIF_v1.RestClient.js.map