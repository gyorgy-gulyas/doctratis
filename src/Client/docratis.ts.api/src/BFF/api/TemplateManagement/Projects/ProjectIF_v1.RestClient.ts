
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

import * as ProjectIF_v1 from "../../../types/TemplateManagement/Projects/ProjectIF_v1";
import { BFFRestClient } from "../../../api/BFFRestClient";
import { AxiosError } from 'axios';

const rest = BFFRestClient.getInstance()

export const ProjectIF = {
	V1: {
		async createProject(name: string, description: string): Promise<ProjectIF_v1.ProjectSummaryDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.createProject");

				const response = await rest.axios.post<ProjectIF_v1.ProjectSummaryDTO>(
					`/templatemanagement/projects/projectif/v1/createproject/${encodeURIComponent(name)}/${encodeURIComponent(description)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "createProject");
			}
		}
		,
		async updateProject(project: ProjectIF_v1.ProjectDetailsDTO): Promise<ProjectIF_v1.ProjectDetailsDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.updateProject");

				const response = await rest.axios.post<ProjectIF_v1.ProjectDetailsDTO>(
					`/templatemanagement/projects/projectif/v1/updateproject`,
					project,
					{ headers: { ...extraHeaders, 'Content-Type': 'application/json' } }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "updateProject");
			}
		}
		,
		async listAccessibleProjects(): Promise<ProjectIF_v1.ProjectIdentityAssignmentDTO[]> {
			try {
				const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.listAccessibleProjects");

				const response = await rest.axios.get<ProjectIF_v1.ProjectIdentityAssignmentDTO[]>(
					`/templatemanagement/projects/projectif/v1/listaccessibleprojects`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "listAccessibleProjects");
			}
		}
		,
		async listAccessibleProjectsForUser(userId: string): Promise<ProjectIF_v1.ProjectIdentityAssignmentDTO[]> {
			try {
				const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.listAccessibleProjectsForUser");

				const response = await rest.axios.get<ProjectIF_v1.ProjectIdentityAssignmentDTO[]>(
					`/templatemanagement/projects/projectif/v1/listaccessibleprojectsforuser/${encodeURIComponent(userId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "listAccessibleProjectsForUser");
			}
		}
		,
		async getProject(projectId: string): Promise<ProjectIF_v1.ProjectDetailsDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.getProject");

				const response = await rest.axios.post<ProjectIF_v1.ProjectDetailsDTO>(
					`/templatemanagement/projects/projectif/v1/getproject/${encodeURIComponent(projectId)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "getProject");
			}
		}
		,
		async addProjectAccess(projectId: string, identityId: string, role: ProjectIF_v1.ProjectAccessRoles): Promise<ProjectIF_v1.ProjectAccessDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("TemplateManagement.Projects.addProjectAccess");

				const response = await rest.axios.post<ProjectIF_v1.ProjectAccessDTO>(
					`/templatemanagement/projects/projectif/v1/addprojectaccess/${encodeURIComponent(projectId)}/${encodeURIComponent(identityId)}?_str_role=${role}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "addProjectAccess");
			}
		}
		,
		}
}
