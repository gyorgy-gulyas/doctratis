
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

import { BFFRestClient } from "../../../api/BFFRestClient";
import { AxiosError } from 'axios';
import * as LoginIF_v1 from "../../../types/IAM/Identities/LoginIF_v1";

const rest = BFFRestClient.getInstance()

export const LoginIF = {
	V1: {
		/// Login using email and password credentials
		async LoginWithEmailPassword(email: string, password: string): Promise<LoginIF_v1.LoginResultDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.LoginWithEmailPassword");

				const response = await rest.axios.post<LoginIF_v1.LoginResultDTO>(
					`/iam/identities/loginif/v1/loginwithemailpassword/${encodeURIComponent(email)}/${encodeURIComponent(password)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "LoginWithEmailPassword");
			}
		}
		,
		/// Complete login with Active Directory
		async LoginWithAD(username: string, password: string): Promise<LoginIF_v1.LoginResultDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.LoginWithAD");

				const response = await rest.axios.post<LoginIF_v1.LoginResultDTO>(
					`/iam/identities/loginif/v1/loginwithad/${encodeURIComponent(username)}/${encodeURIComponent(password)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "LoginWithAD");
			}
		}
		,
		/// Complete login with two-factor authentication (TOTP)
		async Login2FA(code: string): Promise<LoginIF_v1.TokensDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.Login2FA");

				const response = await rest.axios.post<LoginIF_v1.TokensDTO>(
					`/iam/identities/loginif/v1/login2fa/${encodeURIComponent(code)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "Login2FA");
			}
		}
		,
		/// refresh bearer tokens
		async RefreshTokens(refreshToken: string): Promise<LoginIF_v1.TokensDTO> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.RefreshTokens");

				const response = await rest.axios.post<LoginIF_v1.TokensDTO>(
					`/iam/identities/loginif/v1/refreshtokens/${encodeURIComponent(refreshToken)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "RefreshTokens");
			}
		}
		,
		/// getting the KAU url, expects the frontend url, where the frontend must be redirected
		/// the redirect url format is: {redirectUrl}/?accessToken={string}&refreshToken={string&requires2FA={boolean}&accessTokenExpiresAt={string}&refreshTokenExpiresAt={string}
		/// Generates the KAÜ login URL with a signed state containing the frontend returnUrl.
		/// Flow:
		/// 1. Browser calls this endpoint (GetKAULoginUrl) and passes the desired frontend returnUrl.
		/// 2. Backend builds the KAÜ authorize URL with its own callback URL and the signed state.
		/// 3. Browser is redirected to KAÜ login page.
		/// 4. KAÜ authenticates the user and redirects the browser to the backend callback URL with code + state.
		/// 5. Backend exchanges the code for tokens and finally redirects the browser to the original frontend returnUrl.
		/// Note: For local development KAÜ must be able to call the backend callback URL (use ngrok/dev tunnel).
		/// returns: the KAU url, where the browser must be redirected.
		async GetKAULoginURL(redirectUrl: string): Promise<string> {
			try {
				const extraHeaders = rest.getRequestHeaders("IAM.Identities.GetKAULoginURL");

				const response = await rest.axios.get<string>(
					`/iam/identities/loginif/v1/getkauloginurl/${encodeURIComponent(redirectUrl)}`,
					{ headers: extraHeaders }
				);

				return response.data;
			}
			catch (error: unknown) {
				throw rest.mapApiError(error as AxiosError, "GetKAULoginURL");
			}
		}
		,
		}
}
