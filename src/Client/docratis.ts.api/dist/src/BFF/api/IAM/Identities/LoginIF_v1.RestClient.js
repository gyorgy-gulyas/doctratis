"use strict";
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginIF = void 0;
const BFFRestClient_1 = require("../../../api/BFFRestClient");
const rest = BFFRestClient_1.BFFRestClient.getInstance();
exports.LoginIF = {
    V1: {
        /// Login using email and password credentials
        LoginWithEmailPassword(email, password) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.LoginWithEmailPassword");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/loginwithemailpassword/${encodeURIComponent(email)}/${encodeURIComponent(password)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "LoginWithEmailPassword");
                }
            });
        },
        ConfirmEmail(email, token) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.ConfirmEmail");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/confirmemail/${encodeURIComponent(email)}/${encodeURIComponent(token)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "ConfirmEmail");
                }
            });
        },
        ChangePassword(email, oldPassword, newPassword) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.ChangePassword");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/changepassword/${encodeURIComponent(email)}/${encodeURIComponent(oldPassword)}/${encodeURIComponent(newPassword)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "ChangePassword");
                }
            });
        },
        ForgotPassword(email) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.ForgotPassword");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/forgotpassword/${encodeURIComponent(email)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "ForgotPassword");
                }
            });
        },
        ResetPassword(email, token, newPassword) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.ResetPassword");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/resetpassword/${encodeURIComponent(email)}/${encodeURIComponent(token)}/${encodeURIComponent(newPassword)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "ResetPassword");
                }
            });
        },
        /// Complete login with Active Directory
        LoginWithAD(username, password) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.LoginWithAD");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/loginwithad/${encodeURIComponent(username)}/${encodeURIComponent(password)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "LoginWithAD");
                }
            });
        },
        /// Complete login with two-factor authentication (TOTP)
        Login2FA(code) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.Login2FA");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/login2fa/${encodeURIComponent(code)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "Login2FA");
                }
            });
        },
        /// refresh bearer tokens
        RefreshTokens(refreshToken) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.RefreshTokens");
                    const response = yield rest.axios.post(`/iam/identities/loginif/v1/refreshtokens/${encodeURIComponent(refreshToken)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "RefreshTokens");
                }
            });
        },
        /// getting the KAU url, expects the frontend url, where the frontend must be redirected
        /// the redirect url format is: {redirectUrl}/?accessToken={string}&refreshToken={string&requires2FA={boolean}&accessTokenExpiresAt={string}&refreshTokenExpiresAt={string}
        /// Generates the KAÜ login URL with a signed state containing the frontend returnUrl.
        /// Flow:
        /// 1. Browser calls this endpoint (GetKAULoginUrl) and passes the desired frontend returnUrl.
        /// 2. Backend builds the KAÜ authorize URL with its own callback URL and the signed state.
        /// 3. Browser is redirected to KAÜ login page.
        /// 4. KAÜ authenticates the user and redirects the browser to the backend callback URL with code + state.
        /// 5. Backend exchanges the code for tokens and finally redirects the browser to the original frontend returnUrl.
        /// Note: For local development KAÜ must be able to call the backend callback URL (use ngrok/dev tunnel).
        /// returns: the KAU url, where the browser must be redirected.
        GetKAULoginURL(redirectUrl) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const extraHeaders = rest.getRequestHeaders("IAM.Identities.GetKAULoginURL");
                    const response = yield rest.axios.get(`/iam/identities/loginif/v1/getkauloginurl/${encodeURIComponent(redirectUrl)}`, { headers: extraHeaders });
                    return response.data;
                }
                catch (error) {
                    throw rest.mapApiError(error, "GetKAULoginURL");
                }
            });
        },
    }
};
//# sourceMappingURL=LoginIF_v1.RestClient.js.map