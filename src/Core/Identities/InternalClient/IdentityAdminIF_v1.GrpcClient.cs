
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using Core.Identities.Protos.IdentityAdminIF_v1;
using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using ServiceKit.Net;

namespace Core.Identities
{
	public class IdentityAdminIF_v1_GrpcClient : IIdentityAdminIF_v1 
	{
		private readonly GrpcChannel _channel;
		private readonly IdentityAdminIF_v1.IdentityAdminIF_v1Client _client;

		IdentityAdminIF_v1_GrpcClient( string serverAddress )
		{
			_channel = GrpcChannel.ForAddress(serverAddress);
			_client = new IdentityAdminIF_v1.IdentityAdminIF_v1Client(_channel);
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.RegisterLdapDomain(CallingContext ctx, IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_RegisterLdapDomainRequest();
				request.Ldap = ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( ldap ) : null;

				// calling grpc client
				var grpc_response = await _client.RegisterLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "Core.IdentitiesIdentityAdminIF_v1", "RegisterLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_RegisterLdapDomainResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.LdapDomainDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );

					case IdentityAdminIF_v1_RegisterLdapDomainResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_RegisterLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_RegisterLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>> IIdentityAdminIF_v1.GetAllRegisteredLdapDomain(CallingContext ctx)
		{
			try
			{
				// fill grpc request
				var request = new Empty();

				// calling grpc client
				var grpc_response = await _client.GetAllRegisteredLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "Core.IdentitiesIdentityAdminIF_v1", "GetAllRegisteredLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse.ResultOneofCase.Value:
						List<IIdentityAdminIF_v1.LdapDomainSummaryDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IIdentityAdminIF_v1.LdapDomainSummaryDTO.FromGrpc(v) ));
						return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Success( value );

					case IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse.ResultOneofCase.Error:
						return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_GetAllRegisteredLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.GetRegisteredLdapDomain(CallingContext ctx, string id)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_GetRegisteredLdapDomainRequest();
				request.Id = id;

				// calling grpc client
				var grpc_response = await _client.GetRegisteredLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "Core.IdentitiesIdentityAdminIF_v1", "GetRegisteredLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_GetRegisteredLdapDomainResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.LdapDomainDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );

					case IdentityAdminIF_v1_GetRegisteredLdapDomainResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_GetRegisteredLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_GetRegisteredLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> IIdentityAdminIF_v1.UpdateRegisteredLdapDomain(CallingContext ctx, IIdentityAdminIF_v1.LdapDomainDTO ldap)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_UpdateRegisteredLdapDomainRequest();
				request.Ldap = ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( ldap ) : null;

				// calling grpc client
				var grpc_response = await _client.UpdateRegisteredLdapDomainAsync( request, new CallOptions(ctx.ToGrpcMetadata( "Core.IdentitiesIdentityAdminIF_v1", "UpdateRegisteredLdapDomain" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.LdapDomainDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Success( value );

					case IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_UpdateRegisteredLdapDomain'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.LdapDomainDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>> IIdentityAdminIF_v1.getAllAccount(CallingContext ctx)
		{
			try
			{
				// fill grpc request
				var request = new Empty();

				// calling grpc client
				var grpc_response = await _client.getAllAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "Core.IdentitiesIdentityAdminIF_v1", "getAllAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getAllAccountResponse.ResultOneofCase.Value:
						List<IIdentityAdminIF_v1.AccountSummaryDTO> value = new();
						value.AddRange( grpc_response.Value.Value.Select( v => IIdentityAdminIF_v1.AccountSummaryDTO.FromGrpc(v) ));
						return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Success( value );

					case IdentityAdminIF_v1_getAllAccountResponse.ResultOneofCase.Error:
						return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getAllAccountResponse.ResultOneofCase.None:
					default:
						return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getAllAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IIdentityAdminIF_v1.AccountDTO>> IIdentityAdminIF_v1.getAccount(CallingContext ctx, string id)
		{
			try
			{
				// fill grpc request
				var request = new IdentityAdminIF_v1_getAccountRequest();
				request.Id = id;

				// calling grpc client
				var grpc_response = await _client.getAccountAsync( request, new CallOptions(ctx.ToGrpcMetadata( "Core.IdentitiesIdentityAdminIF_v1", "getAccount" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case IdentityAdminIF_v1_getAccountResponse.ResultOneofCase.Value:
						IIdentityAdminIF_v1.AccountDTO value;
						value = grpc_response.Value != null ? IIdentityAdminIF_v1.AccountDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IIdentityAdminIF_v1.AccountDTO>.Success( value );

					case IdentityAdminIF_v1_getAccountResponse.ResultOneofCase.Error:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case IdentityAdminIF_v1_getAccountResponse.ResultOneofCase.None:
					default:
						return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'IdentityAdminIF_v1_getAccount'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IIdentityAdminIF_v1.AccountDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
