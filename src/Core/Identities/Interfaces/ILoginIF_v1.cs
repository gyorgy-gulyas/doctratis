
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using Google.Protobuf.WellKnownTypes;
using ServiceKit.Net;

namespace Core.Identities
{
	public partial interface ILoginIF_v1
	{
		/// <return>LoginResultDTO</return>
		public Task<Response<LoginResultDTO>> LoginWithEmailPassword(CallingContext ctx, string email, string password);

		/// <return>TokensDTO</return>
		public Task<Response<TokensDTO>> LoginTwoFactor(CallingContext ctx, string totp);


		public partial class TokensDTO : IEquatable<TokensDTO>
		{
			public string AccessToken { get; set; }
			public string RefreshToken { get; set; }
			public DateTime AccessTokenExpiredAt { get; set; }

			#region Clone 
			public virtual TokensDTO Clone()
			{
				TokensDTO clone = new();

				clone.AccessToken = new string(AccessToken.ToCharArray());
				clone.RefreshToken = new string(RefreshToken.ToCharArray());
				clone.AccessTokenExpiredAt = AccessTokenExpiredAt;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( TokensDTO other )
			{
				if (other is null) return false;

				if(AccessToken != other.AccessToken) return false;
				if(RefreshToken != other.RefreshToken) return false;
				if(AccessTokenExpiredAt != other.AccessTokenExpiredAt) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as TokensDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(AccessToken);
				hash.Add(RefreshToken);
				hash.Add(AccessTokenExpiredAt);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.LoginIF_v1.TokensDTO ToGrpc( ILoginIF_v1.TokensDTO @this )
			{
				Protos.LoginIF_v1.TokensDTO result = new();

				result.AccessToken = @this.AccessToken;
				result.RefreshToken = @this.RefreshToken;
				result.AccessTokenExpiredAt = Timestamp.FromDateTime(@this.AccessTokenExpiredAt);

				return result;
			}
			public static ILoginIF_v1.TokensDTO FromGrpc( Protos.LoginIF_v1.TokensDTO @from )
			{
				ILoginIF_v1.TokensDTO result = new();

				result.AccessToken = @from.AccessToken;
				result.RefreshToken = @from.RefreshToken;
				result.AccessTokenExpiredAt = @from.AccessTokenExpiredAt.ToDateTime();

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class LoginResultDTO : IEquatable<LoginResultDTO>
		{
			public TokensDTO tokens { get; set; }
			public bool required2FA { get; set; }

			#region Clone 
			public virtual LoginResultDTO Clone()
			{
				LoginResultDTO clone = new();


				// clone of tokens
				clone.tokens = tokens?.Clone();
				clone.required2FA = required2FA;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( LoginResultDTO other )
			{
				if (other is null) return false;


				// equals of tokens
				if(tokens == null && other.tokens != null ) return false;
				if(tokens != null && tokens.Equals(other.tokens) == false ) return false;
				if(required2FA != other.required2FA) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as LoginResultDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();

				// hash of tokens
				if(tokens != null ) hash.Add(tokens);
				hash.Add(required2FA);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.LoginIF_v1.LoginResultDTO ToGrpc( ILoginIF_v1.LoginResultDTO @this )
			{
				Protos.LoginIF_v1.LoginResultDTO result = new();

				result.Tokens = @this.tokens != null ? ILoginIF_v1.TokensDTO.ToGrpc( @this.tokens ) : null;
				result.Required2FA = @this.required2FA;

				return result;
			}
			public static ILoginIF_v1.LoginResultDTO FromGrpc( Protos.LoginIF_v1.LoginResultDTO @from )
			{
				ILoginIF_v1.LoginResultDTO result = new();

				result.tokens = @from.Tokens != null ? ILoginIF_v1.TokensDTO.FromGrpc( @from.Tokens ) : null;
				result.required2FA = @from.Required2FA;

				return result;
			}
			#endregion GrpcMapping
		}

	}
}
