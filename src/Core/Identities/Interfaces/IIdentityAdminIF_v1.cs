
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using ServiceKit.Net;

namespace Core.Identities
{
	public partial interface IIdentityAdminIF_v1
	{
		/// <return>IIdentityAdminIF_v1.LdapDomainDTO</return>
		public Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> RegisterLdapDomain(CallingContext ctx, LdapDomainDTO ldap);

		/// <return>List<IIdentityAdminIF_v1.LdapDomainSummaryDTO></return>
		public Task<Response<List<IIdentityAdminIF_v1.LdapDomainSummaryDTO>>> GetAllRegisteredLdapDomain(CallingContext ctx);

		/// <return>IIdentityAdminIF_v1.LdapDomainDTO</return>
		public Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> GetRegisteredLdapDomain(CallingContext ctx, string id);

		/// <return>IIdentityAdminIF_v1.LdapDomainDTO</return>
		public Task<Response<IIdentityAdminIF_v1.LdapDomainDTO>> UpdateRegisteredLdapDomain(CallingContext ctx, LdapDomainDTO ldap);

		/// <return>List<IIdentityAdminIF_v1.AccountSummaryDTO></return>
		public Task<Response<List<IIdentityAdminIF_v1.AccountSummaryDTO>>> getAllAccount(CallingContext ctx);

		/// <return>IIdentityAdminIF_v1.AccountDTO</return>
		public Task<Response<IIdentityAdminIF_v1.AccountDTO>> getAccount(CallingContext ctx, string id);


		public enum AccountTypesDTO
		{
			User,
			ExternalSystem,
			InternalService,
		}
		#region GrpcMapping
		public static class AccountTypesDTOMappings
		{
			public static Protos.IdentityAdminIF_v1.AccountTypesDTO ToGrpc( IIdentityAdminIF_v1.AccountTypesDTO @this )
			{
				return @this switch
				{
					IIdentityAdminIF_v1.AccountTypesDTO.User => Protos.IdentityAdminIF_v1.AccountTypesDTO.User,
					IIdentityAdminIF_v1.AccountTypesDTO.ExternalSystem => Protos.IdentityAdminIF_v1.AccountTypesDTO.ExternalSystem,
					IIdentityAdminIF_v1.AccountTypesDTO.InternalService => Protos.IdentityAdminIF_v1.AccountTypesDTO.InternalService,
					_ => throw new NotImplementedException(), 
				};
			}

			public static IIdentityAdminIF_v1.AccountTypesDTO FromGrpc( Protos.IdentityAdminIF_v1.AccountTypesDTO @this )
			{
				return @this switch
				{
					Protos.IdentityAdminIF_v1.AccountTypesDTO.User => IIdentityAdminIF_v1.AccountTypesDTO.User,
					Protos.IdentityAdminIF_v1.AccountTypesDTO.ExternalSystem => IIdentityAdminIF_v1.AccountTypesDTO.ExternalSystem,
					Protos.IdentityAdminIF_v1.AccountTypesDTO.InternalService => IIdentityAdminIF_v1.AccountTypesDTO.InternalService,
					_ => throw new NotImplementedException(), 
				};
			}

		}
		#endregion GrpcMapping
		public partial class LdapDomainDTO : IEquatable<LdapDomainDTO>
		{
			public partial class DomainController : IEquatable<DomainController>
			{
				/// Hostname or IP address of the DC
				public string host { get; set; }
				/// LDAP or LDAPS port (e.g. 389 or 636)
				public int port { get; set; }

				#region Clone 
				public virtual DomainController Clone()
				{
					DomainController clone = new();

					clone.host = new string(host.ToCharArray());
					clone.port = port;

					return clone;
				}
				#endregion Clone 

				#region Equals & HashCode 
				public bool Equals( DomainController other )
				{
					if (other is null) return false;

					if(host != other.host) return false;
					if(port != other.port) return false;

					return true;
				}

				public override bool Equals(object obj) => Equals(obj as DomainController);

				public override int GetHashCode()
				{
					var hash = new HashCode();
					hash.Add(host);
					hash.Add(port);

					return hash.ToHashCode();
				}
				#endregion Equals & HashCode 

				#region GrpcMapping
				public static Protos.IdentityAdminIF_v1.LdapDomainDTO.Types.DomainController ToGrpc( IIdentityAdminIF_v1.LdapDomainDTO.DomainController @this )
				{
					Protos.IdentityAdminIF_v1.LdapDomainDTO.Types.DomainController result = new();

					result.Host = @this.host;
					result.Port = @this.port;
;

					return result;
				}
				public static IIdentityAdminIF_v1.LdapDomainDTO.DomainController FromGrpc( Protos.IdentityAdminIF_v1.LdapDomainDTO.Types.DomainController @from )
				{
					IIdentityAdminIF_v1.LdapDomainDTO.DomainController result = new();

					result.host = @from.Host;
					result.port = @from.Port;
;

					return result;
				}
				#endregion GrpcMapping
			}

			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			/// Fully Qualified Domain Name (e.g. yourdomain.local)
			public string name { get; set; }
			/// Optional description or notes
			public string description { get; set; }
			/// NetBIOS name (e.g. YOURDOMAIN)
			public string netbiosName { get; set; }
			/// List of Domain Controller hostnames or IP addresses
			public List<IIdentityAdminIF_v1.LdapDomainDTO.DomainController> domainControllers { get; set; } = new();
			/// Base Distinguished Name (where LDAP queries start, e.g. DC=yourdomain,DC=local)
			public string baseDn { get; set; }
			/// Whether to use secure LDAP (LDAPS)
			public bool useSecureLdap { get; set; }
			/// Service account username used for directory queries (if required)
			public string serviceAccountUser { get; set; }
			/// Service account password (should be stored securely/encrypted)
			public string serviceAccountPassword { get; set; }

			#region Clone 
			public virtual LdapDomainDTO Clone()
			{
				LdapDomainDTO clone = new();

				clone.name = new string(name.ToCharArray());
				clone.description = new string(description.ToCharArray());
				clone.netbiosName = new string(netbiosName.ToCharArray());

				// clone of domainControllers
				clone.domainControllers.AddRange( domainControllers.Select( v => v.Clone() ));
				clone.baseDn = new string(baseDn.ToCharArray());
				clone.useSecureLdap = useSecureLdap;
				clone.serviceAccountUser = new string(serviceAccountUser.ToCharArray());
				clone.serviceAccountPassword = new string(serviceAccountPassword.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( LdapDomainDTO other )
			{
				if (other is null) return false;

				if(name != other.name) return false;
				if(description != other.description) return false;
				if(netbiosName != other.netbiosName) return false;

				// equals of domainControllers
				if(domainControllers.SequenceEqual(other.domainControllers) == false ) return false;
				if(baseDn != other.baseDn) return false;
				if(useSecureLdap != other.useSecureLdap) return false;
				if(serviceAccountUser != other.serviceAccountUser) return false;
				if(serviceAccountPassword != other.serviceAccountPassword) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as LdapDomainDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(name);
				hash.Add(description);
				hash.Add(netbiosName);

				// hash of domainControllers
				foreach( var element_domainControllers in domainControllers)
					hash.Add(element_domainControllers);
				hash.Add(baseDn);
				hash.Add(useSecureLdap);
				hash.Add(serviceAccountUser);
				hash.Add(serviceAccountPassword);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.LdapDomainDTO ToGrpc( IIdentityAdminIF_v1.LdapDomainDTO @this )
			{
				Protos.IdentityAdminIF_v1.LdapDomainDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.Name = @this.name;
				result.Description = @this.description;
				result.NetbiosName = @this.netbiosName;
				result.DomainControllers.AddRange( @this.domainControllers.Select( v => IIdentityAdminIF_v1.LdapDomainDTO.DomainController.ToGrpc( v ) ));
				result.BaseDn = @this.baseDn;
				result.UseSecureLdap = @this.useSecureLdap;
				result.ServiceAccountUser = @this.serviceAccountUser;
				result.ServiceAccountPassword = @this.serviceAccountPassword;

				return result;
			}
			public static IIdentityAdminIF_v1.LdapDomainDTO FromGrpc( Protos.IdentityAdminIF_v1.LdapDomainDTO @from )
			{
				IIdentityAdminIF_v1.LdapDomainDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.name = @from.Name;
				result.description = @from.Description;
				result.netbiosName = @from.NetbiosName;
				result.domainControllers.AddRange( @from.DomainControllers.Select( v => IIdentityAdminIF_v1.LdapDomainDTO.DomainController.FromGrpc(v) ));
				result.baseDn = @from.BaseDn;
				result.useSecureLdap = @from.UseSecureLdap;
				result.serviceAccountUser = @from.ServiceAccountUser;
				result.serviceAccountPassword = @from.ServiceAccountPassword;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class LdapDomainSummaryDTO : IEquatable<LdapDomainSummaryDTO>
		{
			public string id { get; set; }
			/// Fully Qualified Domain Name (e.g. yourdomain.local)
			public string name { get; set; }
			/// Optional description or notes
			public string description { get; set; }

			#region Clone 
			public virtual LdapDomainSummaryDTO Clone()
			{
				LdapDomainSummaryDTO clone = new();

				clone.id = new string(id.ToCharArray());
				clone.name = new string(name.ToCharArray());
				clone.description = new string(description.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( LdapDomainSummaryDTO other )
			{
				if (other is null) return false;

				if(id != other.id) return false;
				if(name != other.name) return false;
				if(description != other.description) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as LdapDomainSummaryDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(name);
				hash.Add(description);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.LdapDomainSummaryDTO ToGrpc( IIdentityAdminIF_v1.LdapDomainSummaryDTO @this )
			{
				Protos.IdentityAdminIF_v1.LdapDomainSummaryDTO result = new();

				result.Id = @this.id;
				result.Name = @this.name;
				result.Description = @this.description;

				return result;
			}
			public static IIdentityAdminIF_v1.LdapDomainSummaryDTO FromGrpc( Protos.IdentityAdminIF_v1.LdapDomainSummaryDTO @from )
			{
				IIdentityAdminIF_v1.LdapDomainSummaryDTO result = new();

				result.id = @from.Id;
				result.name = @from.Name;
				result.description = @from.Description;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class AccountSummaryDTO : IEquatable<AccountSummaryDTO>
		{
			public string id { get; set; }
			public IIdentityAdminIF_v1.AccountTypesDTO Type { get; set; }
			public string Name { get; set; }
			public bool isActive { get; set; }

			#region Clone 
			public virtual AccountSummaryDTO Clone()
			{
				AccountSummaryDTO clone = new();

				clone.Type = Type;
				clone.Name = new string(Name.ToCharArray());
				clone.isActive = isActive;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountSummaryDTO other )
			{
				if (other is null) return false;

				if(Type != other.Type) return false;
				if(Name != other.Name) return false;
				if(isActive != other.isActive) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountSummaryDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(Type);
				hash.Add(Name);
				hash.Add(isActive);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.AccountSummaryDTO ToGrpc( IIdentityAdminIF_v1.AccountSummaryDTO @this )
			{
				Protos.IdentityAdminIF_v1.AccountSummaryDTO result = new();

				result.Id = @this.id;
				result.Type = IIdentityAdminIF_v1.AccountTypesDTOMappings.ToGrpc( @this.Type );
				result.Name = @this.Name;
				result.IsActive = @this.isActive;

				return result;
			}
			public static IIdentityAdminIF_v1.AccountSummaryDTO FromGrpc( Protos.IdentityAdminIF_v1.AccountSummaryDTO @from )
			{
				IIdentityAdminIF_v1.AccountSummaryDTO result = new();

				result.id = @from.Id;
				result.Type = IIdentityAdminIF_v1.AccountTypesDTOMappings.FromGrpc( @from.Type) ;
				result.Name = @from.Name;
				result.isActive = @from.IsActive;

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class AccountDTO : IEquatable<AccountDTO>
		{
			public string id { get; set; }
			public string etag { get; set; }
			public DateTime LastUpdate { get; set; }
			public IIdentityAdminIF_v1.AccountTypesDTO Type { get; set; }
			public string Name { get; set; }
			public bool isActive { get; set; }
			public List<IIdentityAdminIF_v1.ContactInfo> contacts { get; set; } = new();

			#region Clone 
			public virtual AccountDTO Clone()
			{
				AccountDTO clone = new();

				clone.Type = Type;
				clone.Name = new string(Name.ToCharArray());
				clone.isActive = isActive;

				// clone of contacts
				clone.contacts.AddRange( contacts.Select( v => v.Clone() ));

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( AccountDTO other )
			{
				if (other is null) return false;

				if(Type != other.Type) return false;
				if(Name != other.Name) return false;
				if(isActive != other.isActive) return false;

				// equals of contacts
				if(contacts.SequenceEqual(other.contacts) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as AccountDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(id);
				hash.Add(etag);
				hash.Add(LastUpdate);
				hash.Add(Type);
				hash.Add(Name);
				hash.Add(isActive);

				// hash of contacts
				foreach( var element_contacts in contacts)
					hash.Add(element_contacts);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.AccountDTO ToGrpc( IIdentityAdminIF_v1.AccountDTO @this )
			{
				Protos.IdentityAdminIF_v1.AccountDTO result = new();

				result.Id = @this.id;
				result.Etag = @this.etag;
				result.LastUpdate = Timestamp.FromDateTime(@this.LastUpdate);
				result.Type = IIdentityAdminIF_v1.AccountTypesDTOMappings.ToGrpc( @this.Type );
				result.Name = @this.Name;
				result.IsActive = @this.isActive;
				result.Contacts.AddRange( @this.contacts.Select( v => IIdentityAdminIF_v1.ContactInfo.ToGrpc( v ) ));

				return result;
			}
			public static IIdentityAdminIF_v1.AccountDTO FromGrpc( Protos.IdentityAdminIF_v1.AccountDTO @from )
			{
				IIdentityAdminIF_v1.AccountDTO result = new();

				result.id = @from.Id;
				result.etag = @from.Etag;
				result.LastUpdate = @from.LastUpdate.ToDateTime();
				result.Type = IIdentityAdminIF_v1.AccountTypesDTOMappings.FromGrpc( @from.Type) ;
				result.Name = @from.Name;
				result.isActive = @from.IsActive;
				result.contacts.AddRange( @from.Contacts.Select( v => IIdentityAdminIF_v1.ContactInfo.FromGrpc(v) ));

				return result;
			}
			#endregion GrpcMapping
		}

		public partial class ContactInfo : IEquatable<ContactInfo>
		{
			public string contactType { get; set; }
			public string email { get; set; }
			public string phoneNumber { get; set; }

			#region Clone 
			public virtual ContactInfo Clone()
			{
				ContactInfo clone = new();

				clone.contactType = new string(contactType.ToCharArray());
				clone.email = new string(email.ToCharArray());
				clone.phoneNumber = new string(phoneNumber.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( ContactInfo other )
			{
				if (other is null) return false;

				if(contactType != other.contactType) return false;
				if(email != other.email) return false;
				if(phoneNumber != other.phoneNumber) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as ContactInfo);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(contactType);
				hash.Add(email);
				hash.Add(phoneNumber);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 

			#region GrpcMapping
			public static Protos.IdentityAdminIF_v1.ContactInfo ToGrpc( IIdentityAdminIF_v1.ContactInfo @this )
			{
				Protos.IdentityAdminIF_v1.ContactInfo result = new();

				result.ContactType = @this.contactType;
				result.Email = @this.email;
				result.PhoneNumber = @this.phoneNumber;

				return result;
			}
			public static IIdentityAdminIF_v1.ContactInfo FromGrpc( Protos.IdentityAdminIF_v1.ContactInfo @from )
			{
				IIdentityAdminIF_v1.ContactInfo result = new();

				result.contactType = @from.ContactType;
				result.email = @from.Email;
				result.phoneNumber = @from.PhoneNumber;

				return result;
			}
			#endregion GrpcMapping
		}

	}
}
