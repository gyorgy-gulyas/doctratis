
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using Serilog.Context;
using ServiceKit.Net;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.Swagger;
using System.Net.Mime;

namespace Core.Identities
{
	[ApiController]
	[Route( "core/identities/loginif/v1" )]
	public class LoginIF_v1_RestController : ControllerBase 
	{
		private readonly ILogger<LoginIF_v1_RestController> _logger;
		private readonly ILoginIF_v1 _service;
		public LoginIF_v1_RestController( ILogger<LoginIF_v1_RestController> logger, ILoginIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		/// Login using email and password credentials
		[HttpPost( "loginwithemailpassword/{email}/{password}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "Login using email and password credentials" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.LoginResultDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> LoginWithEmailPassword( [FromRoute] string email,  [FromRoute] string password)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithEmailPassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.LoginWithEmailPassword( ctx, email, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.LoginWithEmailPassword'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		/// Complete login with Active Directory
		[HttpPost( "loginwithad/{username}/{password}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "Complete login with Active Directory" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.LoginResultDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> LoginWithAD( [FromRoute] string username,  [FromRoute] string password)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithAD" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.LoginWithAD( ctx, username, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.LoginWithAD'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		/// Complete login with two-factor authentication (TOTP)
		[HttpPost( "login2fa/{code}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "Complete login with two-factor authentication (TOTP)" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.TokensDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> Login2FA( [FromRoute] string code)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.Login2FA" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.Login2FA( ctx, code );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.Login2FA'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "refreshtokens/{refreshToken}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(ILoginIF_v1.TokensDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> RefreshTokens( [FromRoute] string refreshToken)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.RefreshTokens" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.RefreshTokens( ctx, refreshToken );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'LoginIF_v1.RefreshTokens'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
