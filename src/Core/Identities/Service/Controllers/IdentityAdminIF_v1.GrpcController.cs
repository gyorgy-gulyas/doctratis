
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;
using Core.Identities.Protos.IdentityAdminIF_v1;
using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Serilog.Context;
using ServiceKit.Net;

namespace Core.Identities
{
	public class IdentityAdminIF_v1_GrpcController : Core.Identities.Protos.IdentityAdminIF_v1.IdentityAdminIF_v1.IdentityAdminIF_v1Base 
	{
		private readonly ILogger<IdentityAdminIF_v1_GrpcController> _logger;
		private readonly IIdentityAdminIF_v1 _service;

		public IdentityAdminIF_v1_GrpcController( ILogger<IdentityAdminIF_v1_GrpcController> logger, IIdentityAdminIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public override async Task<IdentityAdminIF_v1_RegisterLdapDomainResponse> RegisterLdapDomain( IdentityAdminIF_v1_RegisterLdapDomainRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.RegisterLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					IIdentityAdminIF_v1.LdapDomainDTO ldap;
					ldap = request.Ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( request.Ldap ) : null;

					// calling the service function itself
					var response = await _service.RegisterLdapDomain( ctx , ldap );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_RegisterLdapDomainResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_RegisterLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.RegisterLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_RegisterLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_RegisterLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse> GetAllRegisteredLdapDomain( Empty request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.GetAllRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{

					// calling the service function itself
					var response = await _service.GetAllRegisteredLdapDomain( ctx  );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse();
							result.Value.Value.AddRange( response.Value.Select( v => IIdentityAdminIF_v1.LdapDomainSummaryDTO.ToGrpc( v ) ));
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.GetAllRegisteredLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_GetAllRegisteredLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_GetRegisteredLdapDomainResponse> GetRegisteredLdapDomain( IdentityAdminIF_v1_GetRegisteredLdapDomainRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.GetRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string id;
					id = request.Id;

					// calling the service function itself
					var response = await _service.GetRegisteredLdapDomain( ctx , id );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.GetRegisteredLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_GetRegisteredLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse> UpdateRegisteredLdapDomain( IdentityAdminIF_v1_UpdateRegisteredLdapDomainRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.UpdateRegisteredLdapDomain" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					IIdentityAdminIF_v1.LdapDomainDTO ldap;
					ldap = request.Ldap != null ? IIdentityAdminIF_v1.LdapDomainDTO.FromGrpc( request.Ldap ) : null;

					// calling the service function itself
					var response = await _service.UpdateRegisteredLdapDomain( ctx , ldap );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.LdapDomainDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.UpdateRegisteredLdapDomain'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_UpdateRegisteredLdapDomainResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getAllAccountResponse> getAllAccount( Empty request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getAllAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{

					// calling the service function itself
					var response = await _service.getAllAccount( ctx  );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getAllAccountResponse();
							result.Value.Value.AddRange( response.Value.Select( v => IIdentityAdminIF_v1.AccountSummaryDTO.ToGrpc( v ) ));
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getAllAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getAllAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getAllAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getAllAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<IdentityAdminIF_v1_getAccountResponse> getAccount( IdentityAdminIF_v1_getAccountRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "IdentityAdminIF_v1.getAccount" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string id;
					id = request.Id;

					// calling the service function itself
					var response = await _service.getAccount( ctx , id );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new IdentityAdminIF_v1_getAccountResponse();
							result.Value = response.Value != null ? IIdentityAdminIF_v1.AccountDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new IdentityAdminIF_v1_getAccountResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'IdentityAdminIF_v1.getAccount'",
								}
							};
						}
					}
					else
					{
						return new IdentityAdminIF_v1_getAccountResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new IdentityAdminIF_v1_getAccountResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
