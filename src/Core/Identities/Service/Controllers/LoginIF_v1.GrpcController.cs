
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities.Protos.LoginIF_v1;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Serilog.Context;
using ServiceKit.Net;

namespace Core.Identities
{
	public class LoginIF_v1_GrpcController : Core.Identities.Protos.LoginIF_v1.LoginIF_v1.LoginIF_v1Base 
	{
		private readonly ILogger<LoginIF_v1_GrpcController> _logger;
		private readonly ILoginIF_v1 _service;

		public LoginIF_v1_GrpcController( ILogger<LoginIF_v1_GrpcController> logger, ILoginIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public override async Task<LoginIF_v1_LoginWithEmailPasswordResponse> LoginWithEmailPassword( LoginIF_v1_LoginWithEmailPasswordRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginWithEmailPassword" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string email;
					email = request.Email;
					string password;
					password = request.Password;

					// calling the service function itself
					var response = await _service.LoginWithEmailPassword( ctx , email, password );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_LoginWithEmailPasswordResponse();
							result.Value = response.Value != null ? ILoginIF_v1.LoginResultDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new LoginIF_v1_LoginWithEmailPasswordResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.LoginWithEmailPassword'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_LoginWithEmailPasswordResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_LoginWithEmailPasswordResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<LoginIF_v1_LoginTwoFactorResponse> LoginTwoFactor( LoginIF_v1_LoginTwoFactorRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "LoginIF_v1.LoginTwoFactor" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string totp;
					totp = request.Totp;

					// calling the service function itself
					var response = await _service.LoginTwoFactor( ctx , totp );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							var result = new LoginIF_v1_LoginTwoFactorResponse();
							result.Value = response.Value != null ? ILoginIF_v1.TokensDTO.ToGrpc( response.Value ) : null;
							return result;
						}
						else
						{
							return new LoginIF_v1_LoginTwoFactorResponse {
								Error = new () {
									Status = ServiceKit.Protos.Statuses.NotImplemented,
									MessageText = "Not handled reponse in GRPC Controller when calling 'LoginIF_v1.LoginTwoFactor'",
								}
							};
						}
					}
					else
					{
						return new LoginIF_v1_LoginTwoFactorResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
				}
				catch(Exception ex)
				{
					return new LoginIF_v1_LoginTwoFactorResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
