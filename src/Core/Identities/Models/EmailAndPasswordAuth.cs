
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>


namespace Core.Identities.Identity
{
	/// Password-based authentication
	public partial class EmailAndPasswordAuth : Auth, IEquatable<EmailAndPasswordAuth>
	{
		public string email { get; set; }
		public bool isEmailConfirmed { get; set; }
		/// Hashed password
		public string passwordHash { get; set; }
		/// Salt used for hashing
		public string passwordSalt { get; set; }
		/// old password hashes
		public List<string> passwordHistory { get; set; } = new();
		/// password expiration time
		public DateOnly passwordExpiresAt { get; set; }

		#region Clone 
		public override EmailAndPasswordAuth Clone()
		{
			EmailAndPasswordAuth clone = new();

			// begin: Auth
			clone.method = method;
			// end: Auth

			clone.email = new string(email.ToCharArray());
			clone.isEmailConfirmed = isEmailConfirmed;
			clone.passwordHash = new string(passwordHash.ToCharArray());
			clone.passwordSalt = new string(passwordSalt.ToCharArray());

			// clone of passwordHistory
			clone.passwordHistory.AddRange( passwordHistory.Select( v => new string(v.ToCharArray()) ));
			clone.passwordExpiresAt = passwordExpiresAt;

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( EmailAndPasswordAuth other )
		{
			if (other is null) return false;

			// begin: Auth
			if(method != other.method) return false;
			// end: Auth

			if(email != other.email) return false;
			if(isEmailConfirmed != other.isEmailConfirmed) return false;
			if(passwordHash != other.passwordHash) return false;
			if(passwordSalt != other.passwordSalt) return false;

			// equals of passwordHistory
			if(passwordHistory.SequenceEqual(other.passwordHistory) == false ) return false;
			if(passwordExpiresAt != other.passwordExpiresAt) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as EmailAndPasswordAuth);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Auth
			hash.Add(method);
			// end: Auth

			hash.Add(email);
			hash.Add(isEmailConfirmed);
			hash.Add(passwordHash);
			hash.Add(passwordSalt);

			// hash of passwordHistory
			foreach( var element_passwordHistory in passwordHistory)
				hash.Add(element_passwordHistory);
			hash.Add(passwordExpiresAt);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
