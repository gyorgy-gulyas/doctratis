
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>


namespace Core.Identities.Identity
{
	/// Active Directory-based authentication
	public partial class ADAuth : Auth, IEquatable<ADAuth>
	{
		/// Active Directory domain
		public string LdapDomainId { get; set; }
		/// Active Directory username
		public string userName { get; set; }

		#region Clone 
		public override ADAuth Clone()
		{
			ADAuth clone = new();

			// begin: Auth
			clone.method = method;
			clone.accountId = new string(accountId.ToCharArray());
			// end: Auth

			// begin: BaseEntity
			// end: BaseEntity

			clone.LdapDomainId = new string(LdapDomainId.ToCharArray());
			clone.userName = new string(userName.ToCharArray());

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( ADAuth other )
		{
			if (other is null) return false;

			// begin: Auth
			if(method != other.method) return false;
			if(accountId != other.accountId) return false;
			// end: Auth

			// begin: BaseEntity
			// end: BaseEntity

			if(LdapDomainId != other.LdapDomainId) return false;
			if(userName != other.userName) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as ADAuth);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Auth
			hash.Add(method);
			hash.Add(accountId);
			// end: Auth

			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			hash.Add(LdapDomainId);
			hash.Add(userName);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
