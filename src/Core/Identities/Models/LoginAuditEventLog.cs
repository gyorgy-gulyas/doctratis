
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;

namespace Core.Identities.Identity
{
	public partial class LoginAuditEventLog : Core.Base.IBaseEntity, Core.Auditing.IAuditEventLog, IEquatable<LoginAuditEventLog>
	{
		#region IBaseEntity
		public string id { get; set; }
		public string etag { get; set; }
		public DateTime LastUpdate { get; set; }
		#endregion IBaseEntity

		#region IAuditEventLog
		public string operation { get; set; }
		public string operationDescription { get; set; }
		public string idenityId { get; set; }
		public string idenityName { get; set; }
		public string serviceName { get; set; }
		public string requestId { get; set; }
		public string correlationId { get; set; }
		public string payload { get; set; }
		#endregion IAuditEventLog

		public AccountTypes AccountType { get; set; }
		public Auth.Methods authMethod { get; set; }

		#region Clone 
		public virtual LoginAuditEventLog Clone()
		{
			LoginAuditEventLog clone = new();

			// begin: BaseEntity
			// end: BaseEntity

			// begin: AuditEventLog
			clone.operation = new string(operation.ToCharArray());
			clone.operationDescription = new string(operationDescription.ToCharArray());
			clone.idenityId = new string(idenityId.ToCharArray());
			clone.idenityName = new string(idenityName.ToCharArray());
			clone.serviceName = new string(serviceName.ToCharArray());
			clone.requestId = new string(requestId.ToCharArray());
			clone.correlationId = new string(correlationId.ToCharArray());
			clone.payload = new string(payload.ToCharArray());
			// end: AuditEventLog

			clone.AccountType = AccountType;
			clone.authMethod = authMethod;

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( LoginAuditEventLog other )
		{
			if (other is null) return false;

			// begin: BaseEntity
			// end: BaseEntity

			// begin: AuditEventLog
			if(operation != other.operation) return false;
			if(operationDescription != other.operationDescription) return false;
			if(idenityId != other.idenityId) return false;
			if(idenityName != other.idenityName) return false;
			if(serviceName != other.serviceName) return false;
			if(requestId != other.requestId) return false;
			if(correlationId != other.correlationId) return false;
			if(payload != other.payload) return false;
			// end: AuditEventLog

			if(AccountType != other.AccountType) return false;
			if(authMethod != other.authMethod) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as LoginAuditEventLog);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			// begin: AuditEventLog
			hash.Add(operation);
			hash.Add(operationDescription);
			hash.Add(idenityId);
			hash.Add(idenityName);
			hash.Add(serviceName);
			hash.Add(requestId);
			hash.Add(correlationId);
			hash.Add(payload);
			// end: AuditEventLog

			hash.Add(AccountType);
			hash.Add(authMethod);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
