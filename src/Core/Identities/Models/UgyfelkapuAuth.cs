
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;

namespace Core.Identities.Identity
{
	/// ClientGate (Ügyfélkapu) authentication
	public partial class UgyfelkapuAuth : Auth, IEquatable<UgyfelkapuAuth>
	{
		public enum eIDAS
		{
			/// low – gyengébb azonosítás (pl. sima jelszavas Ügyfélkapu)
			Low,

			/// substantial – erősebb azonosítás (pl. kétfaktor + állami adatbázis validáció)
			Substantial,

			/// high – a legmagasabb, pl. tanúsítvány alapú vagy személyi igazolvány chip-es azonosítás
			High,

		}
		/// Government-issued unique identifier (Ügyfélkapu ID)
		public string UgyfelkapuId { get; set; }
		/// User’s full legal name as returned by the service
		public string legalName { get; set; }
		/// Email address verified by the service (optional)
		public string email { get; set; }
		/// magyar állam által nyújtott hitelesítési szolgáltatás: biztonsági szintek
		public eIDAS assuranceLevel { get; set; }

		#region Clone 
		public override UgyfelkapuAuth Clone()
		{
			UgyfelkapuAuth clone = new();

			// begin: Auth
			clone.method = method;
			// end: Auth

			clone.UgyfelkapuId = new string(UgyfelkapuId.ToCharArray());
			clone.legalName = new string(legalName.ToCharArray());
			clone.email = new string(email.ToCharArray());
			clone.assuranceLevel = assuranceLevel;

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( UgyfelkapuAuth other )
		{
			if (other is null) return false;

			// begin: Auth
			if(method != other.method) return false;
			// end: Auth

			if(UgyfelkapuId != other.UgyfelkapuId) return false;
			if(legalName != other.legalName) return false;
			if(email != other.email) return false;
			if(assuranceLevel != other.assuranceLevel) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as UgyfelkapuAuth);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Auth
			hash.Add(method);
			// end: Auth

			hash.Add(UgyfelkapuId);
			hash.Add(legalName);
			hash.Add(email);
			hash.Add(assuranceLevel);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
