
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>


namespace Core.Identities.Identity
{
	/// Certificate-based authentication
	public partial class CertificateAuth : Auth, IEquatable<CertificateAuth>
	{
		/// Certificate thumbprint (unique identifier)
		public string certificateThumbprint { get; set; }
		public DateTime validFrom { get; set; }
		public DateTime validUntil { get; set; }

		#region Clone 
		public override CertificateAuth Clone()
		{
			CertificateAuth clone = new();

			// begin: Auth
			clone.method = method;
			// end: Auth

			clone.certificateThumbprint = new string(certificateThumbprint.ToCharArray());
			clone.validFrom = validFrom;
			clone.validUntil = validUntil;

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( CertificateAuth other )
		{
			if (other is null) return false;

			// begin: Auth
			if(method != other.method) return false;
			// end: Auth

			if(certificateThumbprint != other.certificateThumbprint) return false;
			if(validFrom != other.validFrom) return false;
			if(validUntil != other.validUntil) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as CertificateAuth);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: Auth
			hash.Add(method);
			// end: Auth

			hash.Add(certificateThumbprint);
			hash.Add(validFrom);
			hash.Add(validUntil);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
