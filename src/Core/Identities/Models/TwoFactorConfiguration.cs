
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;

namespace Core.Identities.Identity
{
	/// Two-factor authentication configuration
	public partial class TwoFactorConfiguration : IEquatable<TwoFactorConfiguration>
	{
		public enum Method
		{
			/// Time-based One-Time Password (e.g. Google Authenticator)
			TOTP,

			/// SMS-based OTP
			SMS,

			/// Email-based OTP
			Email,

		}
		public bool enabled { get; set; }
		public Method method { get; set; }
		public string totpSecret { get; set; }
		public string phoneNumber { get; set; }
		public string email { get; set; }

		#region Clone 
		public virtual TwoFactorConfiguration Clone()
		{
			TwoFactorConfiguration clone = new();

			clone.enabled = enabled;
			clone.method = method;
			clone.totpSecret = new string(totpSecret.ToCharArray());
			clone.phoneNumber = new string(phoneNumber.ToCharArray());
			clone.email = new string(email.ToCharArray());

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( TwoFactorConfiguration other )
		{
			if (other is null) return false;

			if(enabled != other.enabled) return false;
			if(method != other.method) return false;
			if(totpSecret != other.totpSecret) return false;
			if(phoneNumber != other.phoneNumber) return false;
			if(email != other.email) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as TwoFactorConfiguration);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			hash.Add(enabled);
			hash.Add(method);
			hash.Add(totpSecret);
			hash.Add(phoneNumber);
			hash.Add(email);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
