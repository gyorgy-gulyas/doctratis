
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Identities;

namespace Core.Identities.Identity
{
	public partial class Account : Core.Base.IBaseEntity, IEquatable<Account>
	{
		public enum Types
		{
			User,
			ExternalSystem,
			InternalService,
		}
		#region IBaseEntity
		public string id { get; set; }
		public string etag { get; set; }
		public DateTime LastUpdate { get; set; }
		#endregion IBaseEntity

		public Account.Types Type { get; set; }
		public string Name { get; set; }
		public bool isActive { get; set; }
		public List<ContactInfo> contacts { get; set; } = new();
		/// account specific unique secret is, for account specific sign in operations (like TOTP, Hash)
		public string accountSecret { get; set; }

		#region Clone 
		public virtual Account Clone()
		{
			Account clone = new();

			// begin: BaseEntity
			// end: BaseEntity

			clone.Type = Type;
			clone.Name = new string(Name.ToCharArray());
			clone.isActive = isActive;

			// clone of contacts
			clone.contacts.AddRange( contacts.Select( v => v.Clone() ));
			clone.accountSecret = new string(accountSecret.ToCharArray());

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( Account other )
		{
			if (other is null) return false;

			// begin: BaseEntity
			// end: BaseEntity

			if(Type != other.Type) return false;
			if(Name != other.Name) return false;
			if(isActive != other.isActive) return false;

			// equals of contacts
			if(contacts.SequenceEqual(other.contacts) == false ) return false;
			if(accountSecret != other.accountSecret) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as Account);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			hash.Add(Type);
			hash.Add(Name);
			hash.Add(isActive);

			// hash of contacts
			foreach( var element_contacts in contacts)
				hash.Add(element_contacts);
			hash.Add(accountSecret);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
