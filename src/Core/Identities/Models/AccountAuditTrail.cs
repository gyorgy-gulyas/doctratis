
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Core.Auditing;
using PolyPersist.Net.Attributes;

namespace Core.Identities.Identity
{
	public partial class AccountAuditTrail : Core.Base.IBaseEntity, Core.Auditing.IAuditTrail, IEquatable<AccountAuditTrail>
	{
		#region IBaseEntity
		public string id { get; set; }
		public string etag { get; set; }
		public DateTime LastUpdate { get; set; }
		#endregion IBaseEntity

		#region IAuditTrail
		public Core.Auditing.TrailOperations trailOperation { get; set; }
		[ClusteringColumn(1)]
		public DateTime timestamp { get; set; }
		public string entityType { get; set; }
		public string entityId { get; set; }
		public string idenityId { get; set; }
		public string idenityName { get; set; }
		public string payload { get; set; }
		public string previousTrailId { get; set; }
		public string deltaPayload { get; set; }
		#endregion IAuditTrail

		public string accountId { get; set; }
		public string accountName { get; set; }

		#region Clone 
		public virtual AccountAuditTrail Clone()
		{
			AccountAuditTrail clone = new();

			// begin: BaseEntity
			// end: BaseEntity

			// begin: AuditTrail
			clone.trailOperation = trailOperation;
			clone.timestamp = timestamp;
			clone.entityType = new string(entityType.ToCharArray());
			clone.entityId = new string(entityId.ToCharArray());
			clone.idenityId = new string(idenityId.ToCharArray());
			clone.idenityName = new string(idenityName.ToCharArray());
			clone.payload = new string(payload.ToCharArray());
			clone.previousTrailId = new string(previousTrailId.ToCharArray());
			clone.deltaPayload = new string(deltaPayload.ToCharArray());
			// end: AuditTrail

			clone.accountId = new string(accountId.ToCharArray());
			clone.accountName = new string(accountName.ToCharArray());

			return clone;
		}
		#endregion Clone 

		#region Equals & HashCode 
		public bool Equals( AccountAuditTrail other )
		{
			if (other is null) return false;

			// begin: BaseEntity
			// end: BaseEntity

			// begin: AuditTrail
			if(trailOperation != other.trailOperation) return false;
			if(timestamp != other.timestamp) return false;
			if(entityType != other.entityType) return false;
			if(entityId != other.entityId) return false;
			if(idenityId != other.idenityId) return false;
			if(idenityName != other.idenityName) return false;
			if(payload != other.payload) return false;
			if(previousTrailId != other.previousTrailId) return false;
			if(deltaPayload != other.deltaPayload) return false;
			// end: AuditTrail

			if(accountId != other.accountId) return false;
			if(accountName != other.accountName) return false;

			return true;
		}

		public override bool Equals(object obj) => Equals(obj as AccountAuditTrail);

		public override int GetHashCode()
		{
			var hash = new HashCode();
			// begin: BaseEntity
			hash.Add(id);
			hash.Add(etag);
			hash.Add(LastUpdate);
			// end: BaseEntity

			// begin: AuditTrail
			hash.Add(trailOperation);
			hash.Add(timestamp);
			hash.Add(entityType);
			hash.Add(entityId);
			hash.Add(idenityId);
			hash.Add(idenityName);
			hash.Add(payload);
			hash.Add(previousTrailId);
			hash.Add(deltaPayload);
			// end: AuditTrail

			hash.Add(accountId);
			hash.Add(accountName);

			return hash.ToHashCode();
		}
		#endregion Equals & HashCode 
	}

}
