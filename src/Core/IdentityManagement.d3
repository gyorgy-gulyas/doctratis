domain Core {

    context Identities {

        aggregate Identity 
        {
            enum AccountTypes {
                User,
                ExternalSystem,
                InternalService
            }

            root entity Account inherits Core.Base.BaseEntity {
                Type:AccountTypes
                Name:string
                isActive: boolean

                emailAndPasswordAuth:EmailAndPasswordAuth
                adAuth:ADAuth
                certificateAuth:CertificateAuth
                KAUAuth:KAUAuth

                # Optional two-factor authentication settings (TOTP, SMS, Email)
                twoFactor: TwoFactorConfiguration
                contacts: List[ContactInfo]
            }

            valueobject ContactInfo
            {
                contactType: string
                email: string
                phoneNumber : string
            }

            # Base type for all authentication methods
            valueobject Auth {
                enum Methods {
                    EmailAndPassword,
                    ActiveDirectory,
                    Certificate,
                    KAU
                }

                # Defines the type of authentication method
                method: Methods
            }

            # Password-based authentication
            valueobject EmailAndPasswordAuth inherits Auth {
                email: string
                isEmailConfirmed: boolean

                # Hashed password
                passwordHash: string
                # Salt used for hashing
                passwordSalt: string
                # old password hashes
                passwordHistory: List[string] 
                # password expiration time
                passwordExpiresAt: date
            }

            # Two-factor authentication configuration
            valueobject TwoFactorConfiguration {
                enum Method {
                    # Time-based One-Time Password (e.g. Google Authenticator)
                    TOTP,
                    # SMS-based OTP
                    SMS,
                    # Email-based OTP
                    Email
                }
                enabled: boolean
                method: Method
                totpSecret: string
                phoneNumber: string
                email:string
            }

            # Active Directory-based authentication
            valueobject ADAuth inherits Auth {
                # Active Directory domain
                LdapDomainId: string
                # Active Directory username
                userName: string
            }

            # Certificate-based authentication
            valueobject CertificateAuth inherits Auth {
                # Certificate thumbprint (unique identifier)
                certificateThumbprint: string
                validFrom: datetime
                validUntil: datetime
            }

            # ClientGate (Ügyfélkapu) authentication
            valueobject KAUAuth inherits Auth {
                enum eIDAS {
                    # low – gyengébb azonosítás (pl. sima jelszavas Ügyfélkapu)
                    Low,
                    # substantial – erősebb azonosítás (pl. kétfaktor + állami adatbázis validáció)
                    Substantial,
                    # high – a legmagasabb, pl. tanúsítvány alapú vagy személyi igazolvány chip-es azonosítás
                    High
                }

                # Government-issued unique identifier (Ügyfélkapu ID)
                KAUId: string
                # User’s full legal name as returned by the service
                legalName: string
                # Email address verified by the service (optional)
                email: string
                # magyar állam által nyújtott hitelesítési szolgáltatás: biztonsági szintek
                assuranceLevel: eIDAS
            }

            entity LoginAuditEventLog inherits Core.Base.BaseEntity, Core.Auditing.AuditLog {
                AccountType:AccountTypes
                authMethod:Auth.Methods
            }
        }
        
        aggregate Ldap
        {
            root entity LdapDomain inherits Core.Base.BaseEntity {
                valueobject DomainController {
                    # Hostname or IP address of the DC
                    host: string
                    # LDAP or LDAPS port (e.g. 389 or 636)
                    port: integer
                }

                # Fully Qualified Domain Name (e.g. yourdomain.local)
                name: string
                # Optional description or notes
                description: string

                # NetBIOS name (e.g. YOURDOMAIN)
                netbiosName: string
                # List of Domain Controller hostnames or IP addresses
                domainControllers: List[DomainController]

                # Base Distinguished Name (where LDAP queries start, e.g. DC=yourdomain,DC=local)
                baseDn: string

                # Whether to use secure LDAP (LDAPS)
                useSecureLdap: boolean

                # Service account username used for directory queries (if required)
                serviceAccountUser: string
                # Service account password (should be stored securely/encrypted)
                serviceAccountPassword: string
            }
        }

        service AccountService {
            # Finds a user account by email address
            query findUserByEmail( email:string ) : Identity.Account
            # Finds a user account by email address
            query findUserByADCredentrials( ldapDomain:Ldap.LdapDomain, username:string ) : Identity.Account
            
        }

        service LoginService {
            command LoginWithEmailPassword( email:string, password:string ) : LoginIF.v1.LoginResultDTO
            command LoginWithAD( username:string, password:string ) : LoginIF.v1.LoginResultDTO

            command Login2FA( code:string ) : LoginIF.v1.TokensDTO
            command RefreshTokens( totp:string ) : LoginIF.v1.TokensDTO

            query GetKAULoginURL( redirectUrl:string, backendCallbackUrl:string ) : string
            command KAUCallback( code:string, state:string ) : string
        }

        @internal_api(grpc,rest)
        @public_api(grpc, rest, collection="BFF")
        interface LoginIF version 1 {
            dto TokensDTO {
                # Access token used for authentication
                AccessToken: string
                # Expiration date and time of the access token
                AccessTokenExpiresAt: datetime

                # Refresh token used to obtain a new access token
                RefreshToken: string
                # Expiration date and time of the refresh token
                RefreshTokenExpiresAt: datetime
            }

            enum SignInResult {
                # Login was successful
                Ok,
                # Invalid username or password provided
                InvalidUserNameOrPassword,
                # Email has not been confirmed by the user
                EmailNotConfirmed,
                # The user account is deactivated or locked
                UserIsNotActive,
                # The password has expired and needs to be changed
                PasswordExpired,

                # for LDAP auththentication: when username does not contain the domainname
                DomainNotSpecified,
                # for LDAP auththentication: when the domain is not alloed to use the system
                DomainNotRegistered,
                # for LDAP auththentication: when the domain use is not added for the system
                DomainUserNotRegistered,
            }

            dto LoginResultDTO {
                # The result of the login attempt
                result: SignInResult
                # Tokens returned when login is successful
                tokens: TokensDTO
                # Indicates whether two-factor authentication is required
                requires2FA: boolean
            }

            # Login using email and password credentials
            command LoginWithEmailPassword( email:string, password:string ) : LoginResultDTO
            # Complete login with Active Directory
            command LoginWithAD( username:string, password:string ) : LoginResultDTO

            # Complete login with two-factor authentication (TOTP)
            command Login2FA( code:string ) : TokensDTO

            # refresh bearer tokens
            command RefreshTokens( refreshToken:string ) : TokensDTO

            # getting the KAU url, expects the frontend url, where the frontend must be redirected
            # the redirect url format is: {redirectUrl}/?accessToken={string}&refreshToken={string&requires2FA={boolean}&accessTokenExpiresAt={string}&refreshTokenExpiresAt={string}
            # Generates the KAÜ login URL with a signed state containing the frontend returnUrl.
            # Flow:
            # 1. Browser calls this endpoint (GetKAULoginUrl) and passes the desired frontend returnUrl.
            # 2. Backend builds the KAÜ authorize URL with its own callback URL and the signed state.
            # 3. Browser is redirected to KAÜ login page.
            # 4. KAÜ authenticates the user and redirects the browser to the backend callback URL with code + state.
            # 5. Backend exchanges the code for tokens and finally redirects the browser to the original frontend returnUrl.
            # Note: For local development KAÜ must be able to call the backend callback URL (use ngrok/dev tunnel).
            # returns: the KAU url, where the browser must be redirected.
            query GetKAULoginURL( redirectUrl:string ) : string
        }
    }

    context Access {
    }
}
